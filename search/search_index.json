{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Packaging is an important and time-consuming part of authoring and maintaining Python packages. This is particularly true for projects that are not pure Python but contain code that needs to be compiled, and have to deal with distributing compiled extensions and with build dependencies. Many projects in the PyData ecosystem - which includes scientific computing, data science and ML/AI projects - fall into that category. This site aims to provide an overview of the most important Python packaging issues for such projects, with in-depth explanations and references.</p> <p>The content on this site is meant to provide insights and good reference material. This will hopefully provide common ground when discussing potential solutions for those problems or design changes in Python packaging as a whole or in individual packaging tools.</p> <p>The content is divided into \"meta topics\" and \"key issues\". Meta topics are mainly descriptions of aspects of Python packaging that are more or less inherent to the whole design of it, and consequences and limitations that follow from that. Key issues are more specific pain points felt by projects with native code. Key issues may also be more tractable to devise solutions or workarounds for.</p> How are these topics chosen and ranked? <p>The initial list of topics was constructed by soliciting input from ~25 people, who together are a representative subset of stakeholders:</p> <ul> <li>maintainers of widely used PyData projects like NumPy, scikit-learn, Apache   Arrow, CuPy, Matplotlib, SciPy, H5py, Jupyter Hub and Spyder,</li> <li>maintainers of package repositories, package managers and build systems   (Pip, PyPI, Conda, Conda-forge, Spack, Nix, <code>pypa/build</code>, Meson, and   <code>numpy.distutils</code>),</li> <li>engineers from hardware vendors like Intel and NVIDIA,</li> <li>engineers responsible for deploying software for HPC users,</li> <li>educators and organisers of user groups (WiMLDS, SciPy Lectures, Data Umbrella),</li> </ul> <p>Adding new topics and making changes to existing content on this site happens through community input on GitHub.</p>"},{"location":"#meta-topics","title":"Meta topics","text":"<ul> <li>Build &amp; package management concepts and terminology</li> <li>The multiple purposes of PyPI</li> <li>PyPI's author-led social model and its limitations</li> <li>Lack of a build farm for PyPI</li> <li>Expectations that projects provide ever more wheels</li> </ul>"},{"location":"#key-issues","title":"Key issues","text":"<ol> <li> <p>Native dependencies This is, by some distance, the most important issue. Several types of    native dependencies are discussed in detail:</p> <ul> <li>BLAS, LAPACK and OpenMP</li> <li>The Geospatial stack</li> <li>Complex C++ dependencies</li> </ul> </li> <li> <p>Depending on packages for which an ABI matters</p> </li> <li>Packaging projects with GPU code</li> <li>Metadata handling on PyPI</li> <li>Distributing a package containing SIMD code</li> <li>Unsuspecting users getting failing from source builds</li> </ol>"},{"location":"#contributing","title":"Contributing","text":"<p>All contributions are very welcome and appreciated! Ways to contribute include:</p> <ul> <li>Improving existing content on the website: extending or clarifying   descriptions, adding relevant references, diagrams, etc.</li> <li>Providing feedback on existing content</li> <li>Proposing new topics for inclusion on the website, and writing the content for them</li> <li>... and anything else you consider useful!</li> </ul> <p>The content for this website is maintained on GitHub.</p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<ul> <li>Initial development of this website was sponsored by Intel,</li> <li>Initial development effort was led by Quansight Labs,</li> </ul>"},{"location":"glossary/","title":"Glossary","text":""},{"location":"glossary/#acronyms","title":"Acronyms","text":"Acronym ... stands for Explanation ABI Application Binary Interface See here API Application Programming Interface The sum total of available functions, classes, etc. of a given program ARM Advanced RISC Machines Family of RISC architectures, second-most widely used processor family after x86 AVX Advanced Vector eXtensions Various extensions to the x86 instruction set (AVX, AVX2, AVX512), evolution after SSE BLAS Basic Linear Algebra Subprograms Specification resp. implementation for low-level linear algebra routines BOLT Binary Optimization and Layout Tool See here <code>cffi</code> The C FFI for Python See here CI Continuous Integration Testing all changes made to a given software, resp. the infrastructure that makes this possible CLI Command Line Interface CPU Central Processing Unit Main circuitry for executing machine instructions on a computer; contrast GPU CRAN Comprehensive R Archive Network Main index for R language packages, comparable to PyPI CUDA Compute Unified Device Architecture Parallel Computing Framework for NVIDIA GPUs DRY Don't Repeat Yourself Principle in software development aimed at reducing repetition GCC GNU Compiler Collection Main compiler family (for C / C++ / Fortran etc.) on Linux GUI Graphical UI GNU GNU's Not Unix Collection of free software packages under GPL License GPL (GNU) General Public License Foundational \"copyleft\" license of the free software movement glibc GNU C Library Widely used implementation of the C standard library FFI Foreign Function Interface Calling functions written in a different language than the one currently used GPU Graphics Processing Unit Specialized circuitry for quickly computing graphics-related tasks ILP64 - Name used for the standard 64-bit interface to BLAS/LAPACK. Also see \"(64 bit) Data Models\" below IR Intermediate Representation Language-agnostic yet still semantic representation of code within a compiler LAPACK Linear Algebra PACKage Standard software library for numerical linear algebra ISA Instruction Set Architecture Specification of an instruction set for a CPU; e.g. x86-64, arm64, ... JIT Just-in-time Compilation Compiling code just before execution; used in CUDA, PyTorch, PyPy, Numba etc. LLVM - Cross-platform compiler framework, home of Clang, MLIR, BOLT etc. LTO Link-Time Optimization See here LTS Long-Term Support Version of a given software/library/distribution designated for long-term support musl - An alternative implementation of the C standard library MPI Message Passing Interface Standard for message-passing in parallel computing MLIR Multi-Level IR Higher-level IR within LLVM; used i.a. in machine learning frameworks MSVC Microsoft Visual C++ Main compiler on Windows NEP Numpy Enhancement Proposal See here OpenMP Open Multi Processing Multi-platform API for enabling multi-processing in C/C++/Fortran OS Operating System E.g. Linux, MacOS, Windows PEP Python Enhancement Proposal See here <code>pip</code> Pip Installs Packages Default installer for Python packages, distributed with CPython itself; see here PGO Profile-Guided Optimization See here PSF Python Software Foundation See here PyPA Python Packaging Authority Group which maintains core set of projects in Python packaging PyPI Python Package Index Main index where packages get installed from PyPy - An implementation of the Python specification in (quasi-)Python, with JIT capabilities QEMU Quick EMUlator Predominant emulation framework on Linux RHEL Red Hat Enterprise Linux Commercial distribution with some of the longest-running support timelines RISC Reduced Instruction Set Computer Paradigm underlying many past and current CPU architectures ROCm Radeon Open Compute Software stack for AMD GPUs; comparable to CUDA <code>sdist</code> Source DISTribution An archive of the source code of a Python project with metadata SIMD Single Instruction, Multiple Data CPU-specific instructions that can process more data in a single instruction SIG Special Interest Group E.g., Distutils-SIG (now replaced by Discourse) SSE Streaming SIMD Extensions Various extensions to the x86 instruction set (SSE, SSE2, SSE3, SSSE3, SSE4) for SIMD TOML Tom's Obvious Minimal Language Configuration language chosen for <code>pyproject.toml</code>, <code>cargo</code> etc., see here UCRT Universal C Runtime Windows equivalent to glibc/musl UI User Interface UX User eXperience VCS Version Control System Tool to keep track of changes in source code, e.g. <code>git</code> <code>venv</code> Virtual ENVironments Python standard library module for creating environments; distinct from <code>virtualenv</code>"},{"location":"glossary/#terms","title":"Terms","text":"Term Explanation Examples / References Architecture In the context of packaging software, this generally refers to the CPU architecture (=ISA) ABI Break Failing to maintain the ABI See here Binary Compatibility Succeeding to maintain the ABI (e.g. across versions / upgrades) See here Build Backend Specifically in the context of <code>pyproject.toml</code> builds, the tool responsible for building a Python package <code>setuptools</code>, <code>flit</code>, <code>hatch</code>, ... Build Frontend Specifically in the context of <code>pyproject.toml</code> builds, the tool used to trigger a build Predominantly <code>pip</code> Calling Convention Agreed-upon contract with describes how to interact with a given CPU (family) See here <code>cargo</code> Package manager for the Rust language, often upheld as a positive example for installation UX See here Conda Cross-platform package &amp; environment manager, based on distribution channels separate from PyPI See here Conda-forge Community-led packaging effort for (predominantly) Python packages See here Cross-compilation Compiling on a given platform for  another platform See here (64 bit) Data Models Choice of bit-widths for <code>int</code>/<code>long</code> integer types ILP32, ILP64, LP64; see here Demuxer / Demuxing Colloquial name for demultiplexing, which can be considered a single-input, multiple-output switch See here Distribution An entity distributing (consistent) binary artefacts, often forming its own ecosystem Incl. OS: Debian, Fedora, Ubuntu, RHEL...OS-less: Conda, Spack, Homebrew, ... <code>distutils</code> Python standard library module for building and installing packages; added in 1.6, to be removed in 3.12 See here <code>easy_install</code> Deprecated method for installing Python packages, superseded by <code>pip install</code> See here Egg Historical format for distributing Python packages See here Emulation Pretending to run on a different CPU architecture; this can be used to avoid cross-compilation See QEMU, resp. here Linker A tool to correctly find the required third-party symbols for a given project GNU's gold, LLVM's lld, mold Mamba Alternative implementation of the <code>conda</code> CLI tool with a faster solver See here Manylinux Baseline tooling to allow distributing wheels across various Linux distributions See PEP 600 and the PEPs it replaces <code>numpy.distutils</code> Extension to <code>distutils</code>, adding i.a. support for BLAS/LAPACK, Fortran, SIMD etc. See here Platform Colloquially used as interchangeable with the OS, though really only fully specified by the target triple <code>pyproject.toml</code> Standard metadata file for Python packages See PEP 517 &amp; 518 <code>setuptools</code> Most widely used tool for building Python packages; new home of <code>distutils</code> See here Symbol A compiled version of a function See here Tarball Colloquial name for various flavors of <code>.tar</code> archive files See here (Target) Triple Unambiguous specification of the platform for the purpose of (cross-)compiling software for it, usually <code>&lt;arch&gt;-&lt;vendor&gt;-&lt;OS&gt;</code> See PEP 11, resp. here or here <code>virtualenv</code> Installable module for handling virtual environments; largely a superset of <code>venv</code> See here Wheel A format for distributing and installing binary artefacts for Python packages; essentially a tarball plus metadata See here"},{"location":"other_issues/","title":"Other issues","text":"<p>This page contains a collection of issues that do come up in the context of scientific and data science projects and packaging those, but are deemed less high-impact than the key issues.</p>"},{"location":"other_issues/#lack-of-support-for-symlinks-in-wheels","title":"Lack of support for symlinks in wheels","text":"<p>Shared libraries on Linux and other non-Windows platforms are often provided and versioned via symlinks (examples: cupy#6261, <code>libarrow</code> in this Discourse thread, pip#5919, and <code>pypa/wheel</code> issues #203, #400, and #453). In order to build wheels containing versioned shared libraries, symlink support is needed. In the absence of that, the symlinks get materialized into full copies of the symlinked files, blowing up wheel sizes.</p> <p>A second use case for symlinks is for editable installs when the build system uses out-of-place builds. Out-of-place builds are the only option in Meson, and also good practice for CMake. For out-of-place builds, you end up with compiled extension modules and generated files in the build directory, and .py files in the source directory. To put those together into a working editable install, the most straightforward solution is putting symlinks to all files in a wheel - see meson-python#47.</p> <p>It looks like there is an understanding now that symlink support is needed, and that it requires a new wheel format spec (and hence a PEP) - see Clarifications to the wheel specification.</p> <p>An experimental setuptools extension, wheel-axle, implements support for producing a wheel containing symlinks.</p>"},{"location":"other_issues/#dropping-support-for-old-manylinux-versions-is-difficult","title":"Dropping support for old manylinux versions is difficult","text":"<p>Due to how wheel tags work, they need to be explicitly recognized by build and install tools. Old versions of <code>pip</code> tend to be used for years (especially in Linux distros), which means that when a project starts distributing wheels in a newer format (e.g., <code>manylinux2014</code> instead of <code>manylinux1</code>), those new wheels will not be recognized for part of the user base for a long time. As a result, projects are forced to also continue distributing the older format, to avoid those users getting no wheels and a build from sdist instead. Being forced to produce duplicate wheels for years is a lot of extra work and CI time. This is in principle a problem on all platforms, it tends to show up more for Linux because of the combination of old <code>pip</code> versions and more changes to platform tags (we've had <code>manylinux1</code>, <code>manylinux2010</code>, <code>manylinux2014</code> and now, with PEP 600, \"perennial manylinux\" - but that still requires agreeing on new glibc versions to start shipping in practice).</p>"},{"location":"other_issues/#wheel-build-tooling-is-implemented-in-a-scattered-fashion","title":"Wheel build tooling is implemented in a scattered fashion","text":"<p>When working with native dependencies, one must use a tool to vendor dependencies that aren't part of the platform by wheel standards. There are at least three different tools for this: <code>auditwheel</code> (Linux), <code>delocate</code> (macOS) and <code>delvewheel</code> (Windows). They have the same job, but are three independent projects with different capabilities. This is bad from a usability perspective, and when improvements to this tooling needs to be made, the discussion may have to be had multiple times (example: adding an <code>--exclude</code> option to not vendor certain libraries: auditwheel#368).</p> <p>This scattering issue can also be observed in the many support packages to deal with metadata, wheel tags, and other aspects of producing wheels, e.g.: packaging, distlib, pyproject-hooks, and pyproject-metadata. And with <code>pip</code> and <code>build</code> not using the same UX for things like <code>--config-settings</code> and <code>--no-isolation/--no-build-isolation</code>.</p>"},{"location":"other_issues/#bootstrapping-and-circular-dependencies-of-python-packaging-tools","title":"Bootstrapping and circular dependencies of Python packaging tools","text":"<p>Python packaging tools have a bit of a bootstrapping issue, which is a problem for other packaging systems when they want to incorporate those packages. If one wants to build and install <code>pip</code>/<code>setuptools</code>/<code>wheel</code> from source, one needs <code>pip</code>/<code>setuptools</code>/<code>wheel</code> already installed. Same for <code>pypa/build</code> and <code>pypa/installer</code> and <code>flit</code> (<code>poetry</code> does better here, it uses <code>setuptools</code> to build itself). This is getting better - <code>pip</code> vendors all of its runtime dependencies so it can produce a wheel to install itself, and <code>flit</code> now vendors a TOML parser - but there is still a ways to go. See\u00a0this Bootstrapping a specific version of pip thread\u00a0for some discussion on this.</p>"},{"location":"other_issues/#no-good-way-to-install-headers-or-non-python-libraries","title":"No good way to install headers or non-Python libraries","text":"<p>If a library provides functionality that is meant to be used from C or C++ code in another package, one needs to install headers and libraries. To make that work well, those headers and libraries should be installed in a place where other tools can find them. There are standard places for this on a system, e.g. for a prefix <code>/usr</code> the headers may go into <code>/usr/include/</code> and the libraries in <code>/usr/lib</code>. This is technically possible with wheels, but recommended against because the install process may clobber system files. As a result, what projects like NumPy, Pybind11 and PyArrow end up doing is installing into their own tree under <code>site-packages/pkgname</code> (which certainly won't be on a search path), and then recommending that consuming packages query the location with a <code>get_include</code> function. E.g.: <pre><code>import pyarrow\n\npyarrow.get_include()\n</code></pre> This isn't great, because it assumes that the build tool can run Python - and that breaks under cross-compilation. This would work much better under Conda/Spack/Homebrew/etc., however the packages themselves have to decide where to install to. Hence they choose to always install inside site-packages, due to the limitations that PyPI/wheels impose.</p>"},{"location":"other_issues/#more-issues","title":"More issues","text":"<p>These still have to be worked out:</p> <ul> <li>UX for build and install tools is painful and easy to shoot oneself in the   foot with (e.g., most users and maintainers don't understand the details of   build isolation)</li> <li>Tooling will often assume virtualenvs only, and/or deal with environment   activation when it really shouldn't.</li> </ul>"},{"location":"references/","title":"References","text":""},{"location":"references/#build-systems-building-wheels","title":"Build systems &amp; building wheels","text":"<ul> <li>Tarek Ziad\u00e9 - The fate of Distutils - Pycon Summit + Packaging Sprint detailed report (2010)</li> <li>Pauli Virtanen - Building Python wheels with Fortran for Windows (2017)</li> <li>Uwe Korn - How we build Apache Arrow's manylinux wheels (2019)</li> <li>Matthias Bussonnier - IPython reproducible builds (2020)</li> <li>Ralf Gommers - Moving SciPy to the Meson build system (2021)</li> <li>Henry Schreiner - Scikit-build proposal (2021)</li> </ul>"},{"location":"references/#dependency-management","title":"Dependency management","text":"<ul> <li>Mike McGarr - Dependency Hell, Monorepos and beyond (2017) A talk that illustrates the problems with dependency management and transitive dependencies quite well.</li> <li>Pradyun Gedam - Testing the next-gen pip dependency resolver (2020)</li> <li>Sumana Harihareswara - Releasing pip 20.3, featuring new dependency resolver (2020)</li> <li>Henry Schreiner - Should You Use Upper Bound Version Constraints? (2021) A blog post taking a thorough look at upper bounds on versions of dependencies.</li> </ul>"},{"location":"references/#pypi-the-wheel-format","title":"PyPI &amp; the wheel format","text":"<ul> <li>Donald Stufft - Powering the Python Package Index (2016)</li> <li>Nathaniel Smith - <code>pynativelib</code> proposal (2016)</li> <li>Dustin Ingram - Inside the Cheeseshop: How Python Packaging Works (2018)</li> </ul>"},{"location":"references/#package-management","title":"Package management","text":"<ul> <li>Travis Oliphant - Why I promote conda (2013)</li> <li>Jake VanderPlas - Conda: Myths and Misconceptions (2016)</li> <li>Wes McKinney - conda-forge and PyData's CentOS moment (2016)</li> </ul>"},{"location":"references/#other","title":"Other","text":"<ul> <li>Ralf Gommers - Python packaging in 2021 - pain points and bright spots (2021)</li> </ul>"},{"location":"references/#general-python-packaging-content","title":"General Python packaging content","text":"<ul> <li>Python Packaging Authority - Python Packaging User Guide</li> <li>SciKit-HEP - Packaging</li> <li>Tomas Beuzen and Tiffany Timbers - Python Packages</li> <li>Naomi Ceder - The Quick Python Book, 3rd edition, Chapter 18 (2018)</li> <li>Brian Okken - Python Packaging - Brett Cannon (2021)</li> <li>Geir Arne Hjelle - How to Publish Your Own Python Package to PyPI (2022)</li> <li>Dane Hillard - Publishing Python Packages (2022)</li> </ul>"},{"location":"background/binary_interface/","title":"Application Binary Interface (ABI)","text":"<p>The Application Binary Interface (ABI) is a strange, emergent phenomenon. Neither the C nor C++ standard recognize its existence, however it is ubiquitous in discussions about the evolution of those standards.</p> <p>This is broadly because, in a world where everything always gets recompiled from scratch (essentially the purview of those standards), ABI would be irrelevant. However, reality has shown that the always-recompile model is not practical in the vast majority of contexts, and binary artifacts need to be distributed.</p> <p>As soon as this is attempted, we run into all the many potential problems that can appear at the interface between source code and the actual physical execution that is baked into an artifact. For some common terms, it's recommended to familiarize yourself with compilation concepts first.</p> <p>Note that ABI appears for all distribution of binary artifacts, not just those compiled from C/C++. The concepts are the same in all cases though, so for brevity, we restrict ourselves to these languages here.</p> <p>A key focus for binary packaging systems is maintaining binary compatibility. If the packagers are not successful in maintaining that compatibility, we then get an ABI break, which can lead to crashes, segfaults, corrupted data etc. Unsurprisingly, a lot of effort goes into avoiding them.</p>"},{"location":"background/binary_interface/#an-example-of-an-abi-break","title":"An example of an ABI break","text":"<p>Let's assume we are using a function <code>f</code> from a C library <code>libfoo</code>, and this function takes an argument of type <code>long long</code>. <pre><code>extern int f (long long value);\n\nint main () {\nf(1);\nreturn 0;\n}\n</code></pre></p> <p>If we inspect the assembly <pre><code>mov     edi, 1\ncall    f\n</code></pre> we see that a single register, <code>edi</code>, is used to pass the <code>value</code> argument to the function <code>f</code>, which makes sense since our registers are 64 bits wide, and <code>long long</code> matches this on unix platforms.</p> <p>If we replace the first line with <code>extern int f (__int128_t value);</code>, the assembly becomes: <pre><code>mov     edi, 1\nxor     esi, esi\ncall    f\n</code></pre> Here we see that we now need two registers, <code>edi</code> and <code>esi</code>, to correctly pass <code>value</code> into the function <code>f</code>.</p> <p>Imagine then a situation where we did not change our code away from <code>long long</code>, but where the author of <code>libfoo</code> (that contains <code>f</code>) wants to upgrade to wider integers because their users are asking for that. If we upgrade the shared library <code>libfoo</code> (that our code is linked against) without recompilation of our own application, then our code would still run (because the linker would find a symbol with the right name <code>f</code> due to the lack of name mangling). However, because the artifact we had compiled expects <code>f</code> to take <code>long long</code>, it would only set up the <code>edi</code> register correctly, but the upgraded symbol for <code>f</code> would now use both <code>edi</code> and <code>esi</code>.</p> <p>If we're \"lucky\", this only leads to a crash, but it might lead to pretty much arbitrary behavior based on whatever happens to be in <code>esi</code>. This can include anything from wrong results to Heisenbugs based on any other code that might leave some random values in the <code>esi</code> register, all in a way that's generally extremely hard to debug.</p> <p>This is but a trivial example, there are innumerable ways for libraries you rely on to break their ABI, including:</p> <ul> <li>Changing anything about a function signature (C)</li> <li>Changing the function return type (C++)</li> <li>Changing (almost) anything about templating (C++)</li> <li>Adding a data member or virtual functions to a class</li> <li>Making something inline that previously wasn\u2019t</li> <li>Changing your compiler or any of many relevant compilation flags</li> <li>Etc.</li> </ul>"},{"location":"background/binary_interface/#interaction-with-shared-libraries","title":"Interaction with shared libraries","text":"<p>What the above means is that, basically, you can never change anything about a C symbol that has been distributed to consumers in binary form, especially those in shared libraries. Since some code effectively must use shared libraries (not least the C standard library, in the form of glibc/musl on linux, resp. the UCRT on Windows), this is one if not the reason for the importance of distributions, because those will ensure that all their packages are compiled consistently against a given version of libc (and other libraries like the C++ standard library).</p> <p>Similarly, this is why distributions only upgrade their glibc across major releases, because doing so for an LTS release would risk too much breakage, even though libc takes extreme care about remaining backwards compatible.</p>"},{"location":"background/binary_interface/#the-different-levels-of-abi-breaks","title":"The different levels of ABI breaks","text":"<p>Fundamentally, ABI can break at pretty much any point that's involved in the computation of our program. For the sake of clarity, let us divide these into three different levels:</p> <ol> <li>ABI breaks in third-party libraries</li> <li>ABI breaks in compiler or due to compiler configuration</li> <li>ABI breaks in the language standard</li> </ol> <p>The further down we go this list, the more impactful an ABI break becomes, so much so that the latter two happen rarely if ever. When they do happen, they tend to leave long-lasting traces.</p>"},{"location":"background/binary_interface/#abi-breaks-on-language-level","title":"ABI breaks on language level","text":"<p>The last substantial ABI break in C++ was when the standard committee decided to standardize an implementation of <code>std::string</code> that made illegal a previously deployed GCC-extension that used copy-on-write behavior. This meant that all C++ code compiled with GCC against older C++ standards needed to be recompiled.</p> <p>Due to the timelines involved with LTS distributions like RHEL, this took a long time to percolate through the ecosystem.</p> <p>Episodes like these have led to extreme reluctance in the C &amp; C++ committees to change anything that even remotely touches the ABI, even though there are often substantial improvements left on the table due to this (famously, <code>std::regex</code> is excruciatingly slow and cannot be fixed without breaking ABI). This leads to extreme scrutiny (and therefore sluggish pace) in standards development, which has its own knock-on effects (see section about Abseil below).</p> <p>This is also the reason why there are no larger integer types (e.g. <code>int128</code>) that are officially supported by the standard, because their introduction would be an ABI break. Generally, the contortions that the C/C++ committees put themselves through to avoid breaking ABI are spectacular (and have very explicit opportunity costs)1, but ease ABI problems for the levels above.</p> <p>Finally, the unrealized performance gains left on the table due to ABI stability (and millions of dollar cost of single percentage performance pessimization) were what led Google to push hard for an ABI break in the C++ committee, and their defeat at the C++ meeting in Prague is ultimately what led to them withdrawing their substantial resources from compiler development (principally clang), and start their own C++-alike language, Carbon.</p>"},{"location":"background/binary_interface/#abi-breaks-on-compiler-level","title":"ABI breaks on compiler level","text":"<p>For completeness, we need to distinguish that here we are not talking about ABI breaks in the compiler infrastructure (in many ways, compilers are less exposed because using them, i.e. recompiling, drastically lessens the exposure to ABI), but rather of ABI breaks in the artifacts produced by them.</p> <p>Generally, compiler authors are almost as reluctant to break ABI as the language committees, because the effects are largely the same. An exception was MSVC, which for a long time used to change the ABI it generated with every release, meaning that each Visual Studio release (before VS2015) required recompilation of all involved binary artifacts. Starting from VS2015 (up to including VS2022 currently), MSVC has not broken ABI anymore, which means it's possible to, for example, compile with VS2019 against a shared library produced by VS2017.</p> <p>However, compilers expose a vast majority of flags, some of which have impacts on the ABI of the produced artifacts. It's therefore essential to have some degree of homogeneity (resp. control / auditability) about the compilation flags being used in an ecosystem.</p>"},{"location":"background/binary_interface/#abi-breaks-in-third-party-libraries","title":"ABI breaks in third party libraries","text":"<p>This is the most common case; various libraries make different kinds of promises about the stability of their ABI. Some (certainly those lower in the stack, like OpenSSL) promise stringent ABI stability (except across major versions), whereas others might break ABI in every patch release.</p> <p>Knowing which library versions are compatible how is a pretty involved job, but services like abi-laboratory exist to ease this work.</p> <p>For distributions that focus on using shared libraries, this means they need to be able to track which packages are dependent on any given library, and then rebuild all those in a short timespan, in order to roll out a new version of that library (due to the fact that, absent explicit inline namespacing, there can only be one version of a shared library in any given environment).</p> Contrast with default approach in Python packaging <p>Because the standard packaging in Python (wheels) cannot express a dependency on non-Python artifacts, the default approach is to fully copy (\"vendor\") the respective binaries into the wheel, and mangle their symbols in such a way that they do not get accidentally picked up from elsewhere.</p>"},{"location":"background/binary_interface/#abseil","title":"Abseil","text":"<p>Google's Abseil project fills a particular role, which is to backport advances in newer C++ standards, and make those facilities to projects that still need to compile with older standard versions (c.f. the speed of the standardization process due to ABI concerns above).</p> <p>One prominent example of such usage is <code>absl::string_view</code>, which backports the C++17 <code>std::string_view</code> back to C++11 &amp; C++14 (this feature allows to heavily cut down on useless copies involving strings, which has a substantial performance impact). However, these backports are generally not ABI-compatible with the implementations for later standard versions.</p> <p>This puts Abseil in the curious position that the C++ standard version used to compile it has an impact on its ABI. This is because Abseil will, by default, pick standard facilities when available, and otherwise fall back to its backports. As an example, <code>absl::string_view</code> compiled with C++17 will use the C++17 <code>std::string_view</code> ABI, whereas for C++14 and below, it will have a different ABI.</p> <p>Due to the constraint around having only one shared library per environment, Abseil strongly recommends against distribution of its binary artifacts, especially in shared builds. In fact, the only mode of operation that is really considered supported by upstream Abseil is compiling all dependencies with the same C++ standard version. This is obviously incompatible with servicing a large ecosystem, where some libraries might still require C++11, and some already require C++20.</p> <p>This issue would be somewhat manageable if Abseil types were only ever used internally in libraries, meaning things could be solved with a certain degree of care which (static) builds of Abseil are available at build time. However, the situation is exacerbated drastically by the fact that several projects are using (or beginning to use) Abseil types in their public API, e.g. protobuf.</p> <p>In the worst case, this means a full bifurcation of the necessary builds, though more realistically, it means that all Abseil consumers more or less need to agree on a given ABI. Further alternatives exist (e.g. always using the backport types, even if newer C++ standards are used), but are non-trivial to realize at scale.</p> <ol> <li> <p>Despite this article being very colorful, it's worth noting that it was written by the current editor of the C language, as well as a prolific proposal author for both C &amp; C++.\u00a0\u21a9</p> </li> </ol>"},{"location":"background/compilation_concepts/","title":"Basic code compilation concepts","text":"What does this have to do with Python? <p>Python as a glue language is essentially exposed to the sum of all problems that other languages have with their binary distribution, and this is a really vast field (even just for C/C++).</p> <p>Needless to say, adequately summarizing decades of work and developments that have led us to where we are now is not easy. If you find errors or things to improve, please open an issue or PR!</p> <p>In order to get a computer to execute a given unit of work (say, application <code>X</code> calling a function <code>f</code> from a previously compiled library <code>libfoo</code>), a lot of preconditions have to be met:</p> <ul> <li>The function needs to have been compiled into instructions that the   computer understands; a symbol.</li> <li>The symbol for <code>f</code> needs to be named (resp. \"mangled\") in a consistent manner   between the compilation of the current code (for <code>X</code>), resp. the compilation   of the library (<code>libfoo</code>, which contains the symbol for <code>f</code>).</li> <li>The symbol for <code>f</code> needs to be discoverable from within the currently   running process; assuming <code>libfoo</code> is available on the machine where we are   compiling, this is ensured by the linker.</li> <li>Variables passed to the function need to be loaded into the right CPU   registers; this is highly dependent on the calling convention of a given   CPU, or rather, CPU family.</li> <li>The code (in <code>X</code>) calling a given symbol (e.g. for <code>f</code>) needs to be   excruciatingly compatible with the actual implementation of that symbol   (in <code>libfoo</code>).</li> </ul> <p>It's not useful for the average programmer to consider this level of detail when trying to get work done, but it is unfortunately unavoidable when considering the realities of packaging and distributing software as pre-compiled binary artifacts.</p>"},{"location":"background/compilation_concepts/#symbols-mangling-and-linkers","title":"Symbols, mangling and linkers","text":""},{"location":"background/compilation_concepts/#symbols","title":"Symbols","text":"<p>For any given function <code>f</code> you might have written in a language that needs to be compiled (C, C++, ...), you can consider a symbol as a translation of your function to a level that can actually be executed by your computer.</p> <p>So, for example, a simple square function <pre><code>int square(int num) {\nreturn num * num;\n}\n</code></pre></p> <p>will be translated to the following assembly on x86-64 hardware: <pre><code>square:\npush    rbp\nmov     rbp, rsp\nmov     DWORD PTR [rbp-4], edi\nmov     eax, DWORD PTR [rbp-4]\nimul    eax, eax\npop     rbp\nret\n</code></pre> There is a lot of ceremony for reading in the argument into a register, setting up another register for the result, while the actual work is done in: <pre><code>        imul    eax, eax\n</code></pre> If you click the link above, you will see that this assembly looks completely different when compiled for another processor architecture (e.g. arm64, as used in Apple M1 and newer).</p>"},{"location":"background/compilation_concepts/#symbol-name-mangling","title":"Symbol name mangling","text":"<p>Note as well that, in C, the symbol <code>square</code> has exactly the same name as the function - there is a 1:1 relationship, or in other words, there is no \"mangling\" of the symbol name. This is because C has no concept of overloading functions (i.e. having different functions of the same name but different signatures).</p> <p>It also means that you can never change anything about a C symbol that has been distributed to consumers in binary form. We return to this in the background content about ABI.</p> <p>In C++, the same function name can have several different signatures; for example <pre><code>template&lt;class T&gt;\nint square(T num) {\nreturn num * num;\n}\n</code></pre> allows us to call <code>square</code> with all kinds of integers, floats, etc. The compiler will keep track of which flavor of the function has been used in the program and generate the respective symbols for each one of them. In order to distinguish these symbols, they get names that look like gibberish, but really simply bake the types of their input arguments into the identifier, so that we can ensure the right symbol gets called when we actually execute the function. For more details about the most widespread convention about this, see here.</p>"},{"location":"background/compilation_concepts/#linkers","title":"Linkers","text":"<p>When building an executable or a library, any code that references functions from third-party libraries needs to be resolved to the respective symbols, and those need to be found and copied into the executable, or alternatively, loaded at runtime.</p> <p>The tool for this job is called the linker, and it's a hopefully invisible task, at least, until things break (symbols not found, etc.). For an in-depth introduction to linkers see here. Note that the field has evolved a lot since then, and new-generation linkers have appeared (see e.g. mold), but the basic operations have remained essentially unchanged.</p> <p>One crucial aspect about the way things have historically grown is that there is no name-spacing of these symbols in any way. All symbols are fully global, and this brings a lot of constraints. The linker will search for a given symbol within different paths on the system, in order, but this is obviously very fragile, in case symbols appear in several libraries on the linker path.</p>"},{"location":"background/compilation_concepts/#key-take-aways","title":"Key take-aways","text":"<ul> <li>Functions are compiled into symbols.</li> <li>Symbol names are 1:1 with function names in C, mangled according to their   signature in C++.</li> <li>These symbols share a global name space.</li> <li>Symbols are picked by the linker in order of precedence on the path.</li> </ul>"},{"location":"background/compilation_concepts/#shared-vs-static-libraries","title":"Shared vs. static libraries","text":"<p>From a high-level point of view, libraries are collections of symbols, and can come in two different flavors: static and dynamic. In very crude terms, static libraries are only useful at compile time (i.e. compiling an app <code>X</code> against a static library <code>libfoo</code> will copy the symbols from <code>libfoo</code> required by <code>X</code> into the final artifact), whereas for dynamic libraries, the symbols will only be referenced, and then loaded from the dynamic library at runtime.</p> <p>As a rough overview:</p> Static <code>libfoo</code> Dynamic <code>libfoo</code> Compiling app <code>X</code> Copies required symbols from <code>libfoo</code>into final artifact for <code>X</code> References required symbols from <code>libfoo</code> Running app <code>X</code> - Needs to load required symbols from <code>libfoo</code> Storage footprints O(#libs) for libraries using a given symbol Symbol only saved once Binary Interface Self-contained Sensitive to ABI breaks <p>The trade-offs involved here are very painful. Either we duplicate symbols for every artifact that uses them (and the bloat can be extreme, e.g. statically linking the MSVC runtime1 can increase storage / memory footprint by 100MB), or we face the constraints of subjecting us to ABI stability, and finding the right symbols at runtime. For a further deep-dive into how Microsoft evolves its UCRT (Universal C Runtime), see here.</p> <p>In general, large parts of the wider computing ecosystem have found the duplication inherent in static libraries unacceptable, and would rather deal with the constraints of ABI stability. For example, standard functions like <code>printf</code> (or standard mathematical functions, or ...) are used so pervasively that copying those symbols into every produced binary would be extremely wasteful.</p> <p>It's worth noting that on Windows, symbols in shared libraries work quite differently than on unix. Due to various reasons, symbols on Windows have to be explicitly marked <code>__declspec(dllexport)</code> &amp; <code>__declspec(dllimport)</code> in the source with a macro that switches appropriately. This is quite an intrusive change for libraries aiming to be cross-platform, and the reason that several libraries developed primarily on unix do not support shared builds on Windows. Even using workarounds like <code>CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS</code> still doesn't cover all necessary symbols (e.g. global static data members).</p> <p>Using the latter may also have a performance impact, as it keeps the compiler from inlining calls to symbols that have been exported.</p>"},{"location":"background/compilation_concepts/#key-take-aways_1","title":"Key take-aways","text":"<ul> <li>Static libraries are only useful at compile-time; they cause duplication of   symbols, but are much less susceptible to the intricacies of ABIs.</li> <li>Shared libraries need to be available both at compilation as well as at runtime,   solve the symbol duplication, but are extremely susceptible to ABI breaks.</li> <li>Due to the global symbol namespace, there can only be one version / build of   a shared library per environment (unless there is explicit versioning for the   symbols or libraries themselves, or for C++, explicitly different inline   namespaces are used).</li> </ul>"},{"location":"background/compilation_concepts/#foreign-function-interface-ffi","title":"Foreign-Function Interface (FFI)","text":"<p>For any given task, a function may already exist in a library written in another language than the one at hand. In order to avoid rewriting (and maintaining) that functionality, it's desirable to have a way to call such functions from a \"foreign\" language. A common example are the BLAS/LAPACK routines, which are written in Fortran, but provide a C interface in addition to the Fortran one.</p> <p>In addition to the considerations above, this needs to ensure that the types between the language of the callee and the types of the language that the function is implemented in are transformed correctly.</p>"},{"location":"background/compilation_concepts/#transpilation","title":"Transpilation","text":"<p>Many Python projects do not deal with C/C++ directly, but use transpilers like Cython or Pythran that generate C resp. C++ code from (quasi-)Python source code. Aside from almost always being exposed to the NumPy C API &amp; ABI, these modules compile into shared libraries themselves, with all the caveats mentioned above that this implies. However, few projects expose their cythonized functions as a C API, so there are generally fewer concerns about ABI stability in this scenario.</p>"},{"location":"background/compilation_concepts/#cross-compilation","title":"Cross-compilation","text":"<p>Many projects use public CI services, which might not offer some of the more exotic or emerging architectures a project wants to support. This means that publishing binary artifacts for such architectures can often only be achieved with cross-compilation, i.e. compiling on one architecture (e.g., x86-64), for another (e.g., aarch64).</p> <p>A recent example where this was necessary at scale was the introduction of a new processor architecture for Apple's M1 notebooks, for which (almost) no CI agents were available. Distributors of packages for <code>linux-aarch64</code>, <code>linux-ppc64le</code> or <code>windows-arm64</code> are often in similar situations.</p> <p>The difficulty in cross-compilation is that it needs further attention to and separation (both conceptually, as well as in metadata) of the different requirements for the build environment (e.g. the necessary build tools that are executed on the x86-64 agent), as well as the host environment (i.e. the libraries that need to match the target architecture).</p> <p>Additionally, many build procedures assume they can execute arbitrary code (e.g. code generation) on the same architecture as the host, which is not a given in this case and may need to be worked around.</p>"},{"location":"background/compilation_concepts/#performance-optimization","title":"Performance optimization","text":""},{"location":"background/compilation_concepts/#compiler-flags","title":"Compiler flags","text":"<p>TODO: Optimization levels; inlining functions; problems with <code>-Ofast</code></p> <p>For <code>-Ofast</code>, see in particular: https://github.com/conda-forge/conda-forge.github.io/issues/1824</p>"},{"location":"background/compilation_concepts/#link-time-optimization-lto","title":"Link-Time Optimization (LTO)","text":"<p>In the search for speed, it's possible to do a whole-program analysis after everything has been compiled, and let the compiler identify which functions can be inlined. This is generally out of scope for Python packaging, because it is too involved. However, CPython release builds make use of it.</p>"},{"location":"background/compilation_concepts/#profile-guided-optimization-pgo","title":"Profile-Guided Optimization (PGO)","text":"<p>If a program is instrumented (compiled with tracking capabilities) to profile common usage patterns, it is possible to optimize the layout of the final artifact to ensure that hot paths get preferred in branch prediction. This is generally out of scope for Python packaging, because it is too involved. However, CPython release builds make use of it.</p>"},{"location":"background/compilation_concepts/#binary-optimization-and-layout-tool-bolt","title":"Binary Optimization and Layout Tool (BOLT)","text":"<p>Further optimization of the produced binary artifacts can be achieved by arranging their layout to avoid cache misses under profiled behavior. The respective tool is based on LLVM and still under heavy development, and not suitable for all usecases. It is generally out of scope for Python packaging, because it is too involved. However, CPython added experimental support as of 3.12.</p> <ol> <li> <p>This is an extreme example, but it is used in the wild, see e.g. protobuf. Note that Microsoft itself discourages this pattern, but still supports it:</p> <p>We strongly recommend against static linking of the Visual C++ libraries, for both performance and serviceability reasons, but we recognize that there are some use cases that require static libraries and we will continue to support the static libraries for those reasons.</p> <p>\u21a9</p> </li> </ol>"},{"location":"key-issues/abi/","title":"Depending on packages for which an ABI matters","text":"<p>When a library exposes an API in a compiled language, any other library or package that uses that API has to concern themselves with the ABI (Application Binary Interface) as soon as the API provider and API consumer are distributed separately. As a rule, it's best for ABI compatibility if the different packages are built with the same compiler toolchain, command-line flags and other configuration options. If that is not possible or guaranteed, one has to start thinking carefully about whether the two build environments will result in packages that are ABI-compatible.</p> <p>There are a lot of things with an ABI that a Python library maintainer may have to care about:</p> <ul> <li>The C standard library (the <code>libc</code> flavor)</li> <li>The C++ standard library (<code>libstdc++</code> old vs. new string ABI, <code>libc++</code>, MSVC runtime, etc.)</li> <li>Fortran (gfortran vs. g77 ABI)</li> <li>CPython</li> <li>Python packages with C APIs: (NumPy, SciPy)</li> <li>Python packages with C++ APIs (PyTorch, Apache Arrow - see   complex C++ dependencies)</li> <li>Common non-Python dependencies for scientific computing   BLAS, LAPACK, OpenMP,   MPI1 (see mpich.org/abi).</li> </ul> <p>As an example of an ABI issue that many Python developers will encounter: a debug build of CPython is not ABI-compatible with a release build, hence if one wants to use a debug Python, one has to rebuild every package that uses the Python C API.</p> <p>For some more background on ABI, see here.</p>"},{"location":"key-issues/abi/#current-state","title":"Current state","text":"<p>A package manager has to know about ABI, either implicitly or explicitly. In the case of PyPI, it's implicit. There are conventions that anyone publishing a wheel should adhere to. For example, on Windows and macOS, use compilers and flags compatible with those used to produce the Python installers published on python.org. And on Linux, what the various manylinux PEPs say (more complex, so best to use the <code>manylinux</code>-provided Docker images).</p> <p>Other package managers are more explicit about managing ABI, to varying degrees. They also have the advantage of being able to enforce using a consistent compiler toolchain. Inspecting the dependency tree of a SciPy install (which uses the Python and NumPy C APIs/ABIs) will show this:</p> PyPIconda-forgeSpackArch LinuxHomebrew <pre><code>$ pipdeptree -p scipy\nscipy==1.9.3\n  - numpy [required: &gt;=1.18.5,&lt;1.26.0, installed: 1.23.5]\n</code></pre> <pre><code>$ # Note: output edited to remove duplicate packages and python's dependencies\n$ mamba repoquery depends scipy --tree\n\nscipy[1.9.3]\n\u251c\u2500 libgfortran-ng[12.1.0]\n\u2502  \u2514\u2500 libgfortran5[12.1.0]\n\u251c\u2500 libgcc-ng[12.1.0]\n\u2502  \u251c\u2500 _libgcc_mutex[0.1]\n\u2502  \u2514\u2500 _openmp_mutex[4.5]\n\u2502     \u2514\u2500 llvm-openmp[14.0.4]\n\u2502        \u2514\u2500 libzlib[1.2.13]\n\u251c\u2500 libstdcxx-ng[12.1.0]\n\u251c\u2500 python_abi[3.10]\n\u2502  \u2514\u2500 python[3.10.8]\n\u2514\u2500 numpy[1.23.3]\n\u251c\u2500 libblas[3.9.0]\n\u2502  \u2514\u2500 libopenblas[0.3.21]\n\u251c\u2500 libcblas[3.9.0]\n\u251c\u2500 liblapack[3.9.0]\n\u251c\u2500 libblas already visited\n  \u251c\u2500 liblapack already visited\n</code></pre> <pre><code>$ # Note: output edited to remove build-only dependencies\n$ ./spack spec py-scipy%gcc\n\npy-scipy@1.9.2%gcc@12.2.0 arch=linux-endeavourosrolling-skylake_avx512\n    ^openblas@0.3.21%gcc@12.2.0~bignuma~consistent_fpcsr+fortran~ilp64+locking+pic+shared symbol_suffix=none threads=none arch=linux-endeavourosrolling-skylake_avx512\n    ^python@3.9.13%gcc@12.2.0+bz2+ctypes+dbm~debug+libxml2+lzma~nis~optimizations+pic+pyexpat+pythoncmd+readline+shared+sqlite3+ssl~tix~tkinter~ucs4+uuid+zlib patches=0d98e93,4c24573,f2fd060 arch=linux-endeavourosrolling-skylake_avx512\n    ^py-numpy@1.23.3%gcc@12.2.0+blas+lapack patches=873745d arch=linux-endeavourosrolling-skylake_avx512\n</code></pre> <pre><code>$ # Note: output edited to remove duplicates and some transitive dependencies\n$ pactree python-scipy\n\npython-scipy\n\u2514\u2500python-numpy\n  \u251c\u2500cblas\n  \u2502 \u2514\u2500openblas provides blas\n  \u2502   \u2514\u2500gcc-libs\n  \u2502     \u2514\u2500glibc&gt;=2.27\n  \u251c\u2500lapack\n  \u2502 \u2514\u2500openblas provides blas\n  \u2514\u2500python\n    \u251c\u2500bzip2\n    \u2502 \u251c\u2500glibc\n    \u251c\u2500expat\n    \u251c\u2500gdbm\n    \u251c\u2500libffi\n    \u251c\u2500libnsl\n    \u251c\u2500libxcrypt\n    \u251c\u2500openssl\n    \u2514\u2500zlib\n</code></pre> <pre><code>% # Note: output edited to remove duplicate packages\n% brew deps --tree --installed scipy\n\nscipy\n\u251c\u2500\u2500 gcc\n\u2502   \u251c\u2500\u2500 gmp\n\u2502   \u251c\u2500\u2500 isl\n\u2502   \u251c\u2500\u2500 libmpc\n\u2502   \u251c\u2500\u2500 mpfr\n\u2502   \u2514\u2500\u2500 zstd\n\u2502       \u251c\u2500\u2500 lz4\n\u2502       \u2514\u2500\u2500 xz\n\u251c\u2500\u2500 numpy\n\u2502   \u2514\u2500\u2500 openblas\n\u2502       \u2514\u2500\u2500 gcc\n\u251c\u2500\u2500 openblas\n\u2502   \u2514\u2500\u2500 gcc\n\u2514\u2500\u2500 python@3.11\n    \u251c\u2500\u2500 mpdecimal\n    \u251c\u2500\u2500 openssl@1.1\n    \u251c\u2500\u2500 sqlite\n    \u2514\u2500\u2500 xz\n</code></pre> <p>For example, we see <code>python_abi</code> and <code>libgcc_mutex</code> in the conda-forge output; detailed compiler, BLAS interface, CPU architecture and library info in the Spack output; and <code>glibc</code> version info in the Arch Linux output.</p> <p>In general, the more dependencies and more languages one uses, the more ABI compatibility starts to matter. If the Python C API is the only thing used by a package, the rules are relatively straightforward: rebuild for every minor Python version (unless one can use the limited API, then it's even easier), with compatible compilers.</p> <p>It already gets a lot harder as soon as one uses the NumPy C API. Which many packages do, often via Cython. While the NumPy ABI is much more stable than the CPython one (NumPy hasn't broken compatibility in a nontrivial way in over a decade), one still has to understand the rules for building against NumPy:</p> <p>Example: Using the NumPy C API</p> <p>NumPy has a C API, which Cython, SciPy, and many other packages use. That ABI is forward but not backward compatible, meaning if you use it then you must build your wheels against the lowest NumPy version that you expect your users to use. So if you build against version <code>1.X.Y</code> then the runtime requirement you get is <code>numpy&gt;=1.X.Y</code>. That lowest version may depend on Python version and platform. There is no good way to express a dependency like that in <code>pyproject.toml</code>, or even to keep track of what the lowest version should be. Because of that, the <code>oldest-supported-numpy</code> metapackage is being used by projects that depend on <code>numpy</code> as an imperfect hack to obtain the correct <code>numpy==</code> build requirement pins per Python version and platform. It can be used like so:</p> <p><pre><code>[build-system]\nrequires = [\n\"oldest-supported-numpy\",\n# your other build requirements here\n]\n</code></pre> Each time NumPy adds support for a new Python version or platform, <code>oldest-supported-numpy</code> is updated so that each user of the NumPy C API does not have to do that.</p> <p>Despite this complexity, the solution is imperfect - <code>oldest-supported-numpy</code> is unable to communicate back the correct <code>numpy&gt;=</code> runtime requirement, so those requirements are generally incorrect for all packages using NumPy (all wheels will have a generic <code>numpy&gt;=1.Y.Z</code> for the lowest value of <code>1.Y.Z</code> across all wheels).</p> <p>See Adding a dependency on NumPy for more details.</p> <p>The most difficult cases arise with dependencies outside of Python/PyPI (also see native dependencies). At that point one can pick up arbitrary libraries during the build phase of a package, and with complex dependencies the ABI of that dependency may be unknown or have to be introspected. This paper on SciPy's Cython API for BLAS and LAPACK explains how and why SciPy added a Cython API to hide the ABI variations across BLAS/LAPACK implementations from other Python packages.</p> <p>These three \"levels of complexity\" cases are illustrated by these diagrams of package stacks:</p> pure Python onlypure &amp; C API-usingcomplete stack <p>  Package stack: CPython and pure Python packages only </p> <p>  Package stack: CPython, pure Python &amp; Python C API-using packages </p> <p>  Package stack: all the way down to <code>libc</code> </p> <p>C++ APIs are a problem onto themselves. When a library is written in C++ but wants to expose an API with a stable ABI, it often exposes a C rather than a C++ API with <code>extern \"C\"</code>. Keeping ABI stability has a large cost though, it takes a lot of extra work and may prevent changes to internals of a library. Hence it's not always done. For example, PyTorch has a large C++ API and does not promise any ABI stability:</p> <p>Example: Using the PyTorch C++ API</p> <p>PyTorch is mostly written in C++, and exposes a C++ API in addition to its Python API. C++ ABI stability is a tricky topic - it's implementation-defined, and because name mangling can change between compilers (or even compiler versions), mixing binaries built with different compilers isn't possible. PyTorch does not attempt to provide a stable ABI; even bug fix releases aren't guaranteed to be compatible. As a result, all packages using PyTorch's C API must use a runtime requirement like: <pre><code>[project]\ndependencies = [\n\"torch == X.Y.Z\",  # X.Y.Z is the version of PyTorch used to build against\n]\n</code></pre></p> <p>This requirement also implies synchronized releases. If PyTorch does a new release, the team ensures that simultaneous releases of <code>torchvision</code>, <code>torchaudio</code>, <code>torchtext</code>, <code>torchdata</code> and other dependent packages are made. This level of coordination doesn't scale well though, and therefore may limit the use of the PyTorch C++ API - especially by community open source projects whose authors may not have the bandwidth to keep up with releases.</p> <p>The project description for pypi/torchvision is a good example to illustrate the tight version coupling.</p>"},{"location":"key-issues/abi/#problems","title":"Problems","text":"<p>A problem for PyPI and wheels is that there is little coordination on compiler toolchains, ABI changes, etc. So maintainers of every package are on their own trying to figure this out. Other package managers don't have this problem - they build everything with a consistent toolchain (as much as possible at least), either including <code>libc</code> or on top of the <code>libc</code> provided by the operating system. See no build farm and PyPI's author-led social model for more details.</p> <p>CPython breaks its ABI every minor release (unless one's needs are limited, then there is the limited API). This has a huge cost: packages have to build wheels for every minor Python release.</p> <p>NumPy is effectively forced to do the opposite: NumPy needs to not break its ABI in order to avoid exploding the build matrix of every project using its C API. This has a large opportunity cost; there are a lot of improvements and cleanups that NumPy cannot implement. If PyPI either had a build farm or could be disregarded for binaries with ABI stability requirements, NumPy would have broken ABI compatibility multiple times by now2, with positive impacts on maintainability, performance, and functionality.</p> <p>Python packaging build tooling has no understanding of ABI constraints, making it hard to add runtime version constraints to a wheel that are correct (and tighter than those in the corresponding sdist).</p> <p>Manylinux versions still using the old C++ ABI, while most C++ projects want to use the new ABI. <code>manylinux_2_28</code> may change this finally, but isn't yet in use. See complex C++ dependencies for more details on this topic.</p>"},{"location":"key-issues/abi/#history","title":"History","text":"<p>TODO</p>"},{"location":"key-issues/abi/#relevant-resources","title":"Relevant resources","text":"<ul> <li>\"Circumventing the Linker: using SciPy\u2019s BLAS and LAPACK within Cython\",   Ian Henriksen, SciPy 2015.</li> <li>\"<code>archspec</code>: A library for detecting, labeling, and reasoning about microarchitectures\",   Culpo et al. (2020).</li> <li>\"C++ binary compatibility between Visual Studio versions\"</li> <li>GCC docs on <code>libstdc++</code> dual ABI   and on ABI Policy and Guidelines.</li> <li>NumPy docs for downstream package authors.</li> <li>PEP 384 - Defining a Stable ABI.</li> <li>PEP 652 - Maintaining the Stable ABI.</li> <li>Python docs on C API Stability.</li> <li>\"Let\u2019s get rid of the stable ABI, but keep the limited API\"   thread on Discourse (2022).</li> <li>trailofbits/abi3audit.</li> <li>\"ABI compatibility in Python: How hard could it be?\" (2022).</li> <li>HPy - A better C API for Python.</li> <li>Conda-forge FAQ entry on \"How to handle breaking of a package due to ABI incompatibility?\".</li> </ul>"},{"location":"key-issues/abi/#potential-solutions-or-mitigations","title":"Potential solutions or mitigations","text":"<ul> <li>Expressing constraints imposed by an ABI on versions at runtime can be done   with something like conda-forge's   <code>pin_compatible</code> and <code>run_exports</code> features.   See meson-python#29   for ideas about implementing that in a build backend.</li> <li>HPy and its hybrid and universal ABIs   may be the way forward for improvements in constraints that the CPython ABI   imposes, as well as enabling use of alternative interpreters.</li> <li>Coordinated rebuilds that are needed because of <code>==</code> runtime constraints   would be a lot easier with a build farm (as discussed   here).</li> </ul> <ol> <li> <p><code>h5py</code> is an example of a project that support MPI but, despite regular user requests, does not ship MPI-enabled wheels. MPI has multiple implementations, and does not have a stable ABI (see, e.g., mpi-issues#654 for (lack of) MPI ABI stability).\u00a0\u21a9</p> </li> <li> <p>Actually, NumPy did break its ABI once, in the 1.4.0 release (2010). This resulted in some mayhem and very long and painful discussions. The ABI was unbroken, and hasn't been touched since.\u00a0\u21a9</p> </li> </ol>"},{"location":"key-issues/gpus/","title":"Packaging projects with GPU code","text":"<p>Modern Graphics Processing Units (GPUs) can be used, in addition to their original purpose (rendering graphics), for high-performance numerical computing. They are particularly important for deep learning, but also widely used for data science and traditional scientific computing and image processing application.</p> <p>GPUs from NVIDIA using the CUDA programming language are dominant in deep learning and scientific computing as of today. With both AMD and Intel releasing GPUs and other programming languages for them (ROCm, SYCL, OpenCL), the landscape may become more diverse in the future. In addition, Google provides Tensor Processing Units access in Google Cloud Platform, and a host of startups are developing custom accelerator hardware for high-performance computing applications.</p> <p>Prominent projects which rely on GPUs and are either Python-only or widely used from Python include TensorFlow, PyTorch, CuPy, JAX, RAPIDS, MXNet, XGBoost, Numba, OpenCV, Horovod and PyMC.</p> <p>Packaging such projects for PyPI has been, and still is, quite challenging.</p>"},{"location":"key-issues/gpus/#current-state","title":"Current state","text":"<p>As of December 2022, PyPI and Python packaging tools are completely unaware of GPUs, and of CUDA. There is no way to mark a package as needing a GPU in sdist or wheel metadata, or as containing GPU-specific code (CUDA or otherwise). A GPU is hardware that may or may not be present in a machine that a Python package is being installed on - <code>pip</code> and other installers are unaware of this. If wheels contain CUDA code, they require CUDA Toolkit (a specific version of it at that) to be installed. Again, installers do not know this and there is no way to express this dependency. The same will be true for ROCm and other types of GPU hardware and languages.</p> <p>NVIDIA has made steps towards better support for CUDA on PyPI, through CUDA Python (website,  PyPI package), however this is quite new and not used by other projects (nor does it target large projects like PyTorch and TensorFlow). For most of its own projects, it uses a Private PyPI Index - and that also includes rebuilds of TensorFlow and other packages.</p> <p>A single CUDA version supports a reasonable range of GPU architectures. New CUDA versions get released regularly, and - because they come with increased performance or new functionality - it may be necessary or desirable to build new wheels for that CUDA version. If only the supported CUDA version is different between two wheels, the wheel tags and filename will be identical. Hence it is not possible to upload more than one of those wheels under the same package name. To work around that, a project may either support only one CUDA version on PyPI, or create different packages. PyTorch and TensorFlow do the former, with TensorFlow supporting only a single CUDA version, and PyTorch providing more wheels for other CUDA versions and a CPU-only version in a separate wheelhouse (see pytorch.org/get-started). CuPy provides a number of packages: <code>cupy</code>, <code>cupy-cuda102</code>, <code>cupy-cuda110</code>, <code>cupy-cuda111</code>, <code>cupy-cuda11x</code>, <code>cupy-rocm-4-3</code>, <code>cupy-rocm-5-0</code>. Other projects do similar things - none of it works very well.</p> <p>GPU packages tend to result in very large wheels. This is true in particular for deep learning packages, because they link in cuDNN. For example, the most recent <code>manylinux2014</code> wheels for TensorFlow are 588 MB (2.11.0 files), and for PyTorch those are 890 MB (1.13.0 files). The problems around and causes of GPU wheel sizes were discussed in depth in this Packaging thread on Discourse.</p> <p>So far we have only discussed individual projects containing GPU code. Those projects are the most fundamental libraries in larger stacks of packages (perhaps even whole ecosystems). Hence, other projects will want to declare a dependency on them. This is currently quite difficult, because of the implicit coupling through a shared CUDA version. If a project like PyTorch releases a new version and bumps the default CUDA version used in the <code>torch</code> wheels, then any downstream package which also contains CUDA code will break unless it has an exact <code>==</code> pin on the older <code>torch</code> version, and then releases a new version of its own for the new CUDA version. Such synchronized releases are hard to do. If there where a way to declare a dependency on CUDA version (e.g., through a metapackage on PyPI), that strong coupling between packages would not be necessary.</p> <p>Other package managers typically do have support for CUDA:</p> <ul> <li>Conda: provides all CUDA versions through a <code>cudatoolkit</code> conda-forge package   and a virtual <code>__cuda</code> package,</li> <li>Spack: supports building with or without CUDA, and allows specifying   supported GPU architectures:   docs.   CUDA itself can be specified as externally provided, and is recommended to be   installed directly from NVIDIA: docs.   ROCm is supported in a similar fashion,</li> <li>Ubuntu: provides one CUDA version per Ubuntu release: <code>nvidia-cuda-toolkit</code> package,</li> <li>Arch Linux: provides one CUDA version: <code>cuda</code> package.</li> </ul> <p>Those package managers typically also provide CUDA-related development tools, and build all the most popular deep learning and numerical computing packages for the CUDA version they ship.</p>"},{"location":"key-issues/gpus/#problems","title":"Problems","text":"<p>The problems around GPU packages include:</p> <p>User-friendliness:</p> <ul> <li>Installs depend on a specific CUDA or ROCm version, and <code>pip</code> does   not know about this. Hence installs may succeed, followed by errors at   runtime,</li> <li>CUDA or ROCm must be installed through another package manager or a direct   download from the vendor. And the other package manager upgrading CUDA or   ROCm may silently break the installed Python package,</li> <li>Wheels may have to come from a separate wheelhouse, requiring install commands like   <code>python -m pip install torch --extra-index-url https://download.pytorch.org/whl/cu116</code>   which are easy to get wrong,</li> <li>The very large download sizes are problematic for users on slow network   connections or plans with a maximum amount of bandwidth usage for a given   month (<code>pip</code> potentially downloading multiple wheels because of backtracking   in the resolver is extra painful here).</li> </ul> <p>Maintainer effort:</p> <ul> <li>Keeping wheel sizes below either the 1 GB hard limit or the current PyPI file   size or total project size limits can be a lot of work (or even impossible),</li> <li>Hosting your own wheelhouse to support multiple CUDA or ROCm versions is a   lot of work,</li> <li>Depending on another GPU package is difficult, and likely requires a <code>==</code> pin,</li> <li>A dependency on CUDA, ROCm, or a specific version of them cannot be   expressed in metadata, hence maintaining build environments is more   error-prone than it has to be.</li> </ul> <p>For PyPI itself:</p> <ul> <li>The large amount of space and bandwidth consumed by GPU packages.   pypi.org/stats shows under \"top projects by total   package size\" that many of the largest package are GPU ones, and that   together they consume a significant fraction (estimated at ~20% for the ones   listed in the top 100) of the total size for all of PyPI.</li> </ul>"},{"location":"key-issues/gpus/#history","title":"History","text":"<p>Support for GPUs and CUDA has been discussed on and off on distutils-sig and the Packaging Discourse:</p> <ul> <li>Environment markers for GPU/CUDA availability   thread on distutils-sig (2018),</li> <li>The next manylinux specification   thread on Discourse (2019), with a specific comment about presence/absence of   GPU hardware and CUDA libraries being out of scope,</li> <li>What to do about GPUs? (and the built distributions that support them)   on a Packaging thread on Discourse (2021),</li> </ul> <p>None of the suggested ideas in those threads gained traction, mostly due to a combination of the complexity of the problem, difficulty of implementing support in packaging tools, and lack of people to work on a solution.</p>"},{"location":"key-issues/gpus/#relevant-resources","title":"Relevant resources","text":"<p>TODO</p>"},{"location":"key-issues/gpus/#potential-solutions-or-mitigations","title":"Potential solutions or mitigations","text":"<p>Potential solutions on the PyPI side include:</p> <ul> <li>add specific wheel tags or metadata for the most popular libraries,</li> <li>make an environment marker or selector package approach work,</li> <li>improve interoperability with other package managers, in order to be able to   declare a dependency on a CUDA or ROCm version as externally provided,</li> </ul>"},{"location":"key-issues/pypi_metadata_handling/","title":"Metadata handling on PyPI","text":"<p>Metadata for sdists and wheels on PyPI is contained in those sdists and wheels themselves, in a form as prescribed by the Core metadata specifications. That metadata format is typically produced by build backends. The source of that metadata is information that package authors maintain within their project. It historically lived in <code>setup.py</code>, and may still live there today - however it now preferably should be specified in <code>pyproject.toml</code> (see PEP 621 - Storing project metadata in pyproject.toml). Specifying that metadata is relatively straightforward, and is mostly in decent shape (even though there are some loose ends1) - with the exception of native dependencies, as discussed on this key issue page.</p> Can package metadata be queried for PyPI? <p>From this Discourse thread (Dec 2022):</p> <p><code>dist-info-metadata</code> is available in the simple API for wheels (and sdists if they follow PEP 643). But PyPI doesn\u2019t expose that data (yet).</p> <p>The PyPI JSON API includes metadata, but it is unreliable as it is at the project release level, so it doesn\u2019t take into account the possibility of different wheels having different metadata. But it\u2019s the nearest you can get right now.</p> <p>See also the Project Metadata Table in BigQuery.</p> <p>Similarly, metadata about the package can be queried. For example, Libraries.io provides an easy to use overview of projects including reverse dependencies. And there are a number of ways of querying package download statistics, see for example pypistats.org for a UI with quick numbers, and the Analyzing PyPI package downloads page of the Python Packaging User Guide which lists a number of tools to enable more in-depth analysis.</p> <p>While specifying metadata for a package is relatively straightforward in most cases2, the same cannot be said for the workflows around dealing with problems in metadata.</p>"},{"location":"key-issues/pypi_metadata_handling/#current-state","title":"Current state","text":"<p>By design, metadata in artifacts on PyPI is (a) immutable and (b) contained within the artifact itself rather than available separately. Both of those design aspects can be problematic.</p>"},{"location":"key-issues/pypi_metadata_handling/#impact-of-immutable-metadata","title":"Impact of immutable metadata","text":"<p>When a package author discovers an issue with their release or with a particular artifact in a release, there are good solutions. In the former case, a release can be yanked. In the latter case, a new artifact with a higher build number can be uploaded. This blog post by Brett Cannon (2021) explains what to do in those cases in detail. Where immutability becomes a problem is when the issue is in the metadata - in particular, when a build or runtime dependency changes something that breaks a package. It's a problem because:</p> <ol> <li>Doing a new release for complex packages with native code is very expensive.    It may be days of full-time work (builds may have to run on multiple CI    systems, and those configs tend to degrade pretty quickly for older    releases), and therefore it may not be feasible to do on short notice.</li> <li>Having affected users deal with the situation by themselves is also very    expensive. The most popular packages have hundreds of thousands or even    millions of users, so even if only 1% of users3 are affected by a problem    with a dependency, that is still an unacceptably large amount of work (and    probably lots of complaints on the issue tracker).</li> </ol> <p>(2) is often advocated for by Python packaging experts, in particular by having users apply post-hoc constraints through a constraints file. (2) is the worst solution though in the case of large-scale breakage, both because of the large numbers of users that each need to take action and because users are, more often than not, not developers. Instead, they're (data) scientists, engineers, business analysts and so on. They don't want to, and shouldn't need to, understand things like constraints files. If the metadata needs patching, the far better solution would be to patch them on PyPI. And this is not possible, because artifacts are immutable.</p> <p>Depending on the situation, these are the most common ways that an issue with a dependency gets dealt with:</p> <ul> <li>Bite the bullet and do a new release of the affected package,</li> <li>Convince the authors of the dependency that broke things to unbreak them   again (e.g., undo removal of a deprecated or private API),</li> <li>Or even temporarily yank the dependency that broke things.</li> </ul> <p>Because this kind of situation happens frequently, it may also be a good idea to add upper bounds on version specifiers of dependencies. No one likes upper bounds, because they result in incompatibilities and make dependency resolution more difficult. A lot of effort has been spent discussing the issues with upper bounds (e.g., see this blog post and this Discourse thread); package authors are caught between a rock and a hard place though - the problem is immutability of metadata.</p> <p>On upper bounds - Matthias Bussonnier</p> <p>I echo many sentiments here that 1) I hate that some projects have to put an upper bound [in their metadata], but 2) they do it because removing the upper bound is worse.</p> <p>Experience with other package managers that are able to patch metadata shows that this is a much nicer experience. For example, conda-forge uses \"repo data patching\", while Spack and Nix build from source (with a binary cache providing many common build configs) and the Spack repo and Nixpgs repo contain metadata for all packages and can therefore be updated via a PR. As a result, upper bounds that are present on PyPI can typically be left out safely in these package managers; applying new constraints later is cheap.</p> <p>Managing the necessary upper bounds itself is an exercise that may have to be repeated for each release, and takes time and effort. See for example this part of the SciPy developer guide.</p>"},{"location":"key-issues/pypi_metadata_handling/#metadata-contained-within-artifacts","title":"Metadata contained within artifacts","text":"<p>Each wheel has its own metadata contained within the artifact. It can be different metadata than that for the sdist for which it came - and this is more likely to happen for packages with native code. Wheels for packages with native code also tend to be larger -from tens of MBs for the likes of NumPy, SciPy, Pandas and PyArrow to many hundreds of MBs for deep learning packages.</p> <p>Downloading such large packages in order to access the metadata is clearly suboptimal. Especially if that metadata then shows a conflict and Pip has to backtrack. Also during debugging install issues this is a significant problem - when one wants to go through a number of wheels and compare differences with for example the <code>METADATA</code> or <code>RECORD</code> files, the current process is slow and bandwidth-intensive.</p> <p>The solution seems obvious: make metadata separately accessible from wheels. Luckily, the solution for this is currently in progress:</p> <p>PEP 568 - Serve Distribution Metadata in the Simple Repository API</p> <p>PEP 568 (accepted) proposes to make the metadata file in the <code>.dist-info</code> directory of a wheel separately available. This should solve the problems identified in this section. Support is already implemented in <code>pip</code>. Implementation in PyPI is still pending, see warehouse#8254.</p> <p>There are also issues around packages who don't yet use static metadata in <code>pyproject.toml</code>, and reliable metadata for sdists being only relatively recently available (PEP 643, Nov 2020). With dynamic metadata or <code>setup.py</code> usage, sdists have to be built in order to obtain the metadata. This is a general packaging issue however, not specific to packages with native code, and not nearly as much of a problem as the other issues discussed higher up. See, e.g., pip#1884 and this thread for details.</p>"},{"location":"key-issues/pypi_metadata_handling/#problems","title":"Problems","text":"<p>The most important problem is the need to add upper bounds on version specifications of dependencies.</p>"},{"location":"key-issues/pypi_metadata_handling/#history","title":"History","text":"<ul> <li>Older analyses of PyPI dependencies include   this one from Olivier Girardot (2013),   this one from Martin Thoma (2015), and   this one from Kevin Gullikson (2016).</li> <li>The Requires-Python upper limits Discourse thread (2021) went into detail on issues around specifying the upper bound of supported Python versions.</li> </ul> <p>TODO: add more history</p>"},{"location":"key-issues/pypi_metadata_handling/#relevant-resources","title":"Relevant resources","text":"<p>TODO</p>"},{"location":"key-issues/pypi_metadata_handling/#potential-solutions-or-mitigations","title":"Potential solutions or mitigations","text":"<ul> <li>Making metadata editable. This would require a PEP and be a large effort.</li> <li>The impact of issues with build dependencies, and hence the need to add upper   bounds, would be much less if Pip did not install from sdist by default, as   discussed in   Unsuspecting users getting failing from-source builds.</li> <li>Fix issues in installers. E.g., Poetry and PDM should not propagate upper   bounds the way they currently do, as discussed in   this thread.   Pip also needs to continue reducing the amount of excessive backtracking, and   use the separate metadata available soon with PEP 568 to reduce the impact of   that backtracking. See   Possible ways to reduce backtracking   in the Pip docs for current mitigation options available to users.</li> </ul> <ol> <li> <p>Example of a not unimportant loose end: PEP 639 - Improving License Clarity with Better Package Metadata is still in Draft status and not supported by PyPI as of Dec 2022.\u00a0\u21a9</p> </li> <li> <p>See Example: Using the NumPy C API on this page for a case where getting the right metadata into a wheel is very difficult.\u00a0\u21a9</p> </li> <li> <p>The number of users on platforms without wheel support on PyPI is on the    order of 1%, and that is a set of users that is frequently affected by    issues with build dependencies.\u00a0\u21a9</p> </li> </ol>"},{"location":"key-issues/simd_support/","title":"Distributing a package containing SIMD code","text":"<p>Single Instruction, Multiple Data (SIMD) instructions are instructions that are CPU-specific, and can yield significant performance gains compared to regular, portable C/C++ code. Each popular modern CPU architecture has its own SIMD instruction sets.</p> <p>Using SIMD instructions in a Python package is quite difficult, because there is no way to specify, in either metadata or wheel tags, what CPU features are needed on the target machine in order to use a given wheel.</p> What does code containing SIMD instructions look like? <p>This code fragment shows how to use a single SSE2 instruction on an x86-64 CPU. It defines a <code>mul</code> function which multiplies two double precision floating point vectors: <pre><code>#include &lt;immintrin.h&gt;\n__m128d mul(__m128d a, __m128d b)\n{\nreturn _mm_mul_pd(a, b);\n}\n</code></pre> If the CPU supports the instruction and the code gets compiled with the needed compiler flag (<code>-msse2</code>), the <code>mul</code> function will work and will be faster than using regular multiplication in C/C++.</p> <p>As a more real-world example, here is a code fragment from a <code>sin</code> function for 32-bit float data from NumPy code: <pre><code>#if NPY_SIMD_F32 &amp;&amp; NPY_SIMD_FMA3\nif (is_mem_overlap(src, steps[0], dst, steps[1], len) ||\n!npyv_loadable_stride_f32(ssrc) || !npyv_storable_stride_f32(sdst)\n) {\nfor (; len &gt; 0; --len, src += ssrc, dst += sdst) {\nsimd_sincos_f32(src, 1, dst, 1, 1, SIMD_COMPUTE_SIN);\n}\n} else {\nsimd_sincos_f32(src, ssrc, dst, sdst, len, SIMD_COMPUTE_SIN);\n}\n#else\nfor (; len &gt; 0; --len, src += ssrc, dst += sdst) {\nconst float src0 = *src;\n*dst = npy_sinf(src0);\n}\n#endif\n</code></pre></p> How important is use of SIMD code? <p>Code with SIMD instructions is typically a lot more difficult to read and maintain than regular C or C++ code. The speedups can be large however, so the implementation effort and the maintenance burden may be worth it. For basic and heavily used functionality like element-wise math functions (<code>abs</code>, <code>sqrt</code>, <code>multiply</code>, etc.), typical gains are in the <code>1.x - 10</code> range, and sometimes even <code>&gt;10</code>). Here are a few benchmark results for:</p> <ul> <li>OpenCV color conversion functionality, ~25x faster on ARM CPUs with NEON:   opencv#19883</li> <li>NumPy's <code>absolute</code>, <code>reciprocal</code>, <code>sqrt</code>, <code>square</code> functions, for   SSE/AVX2 (x86-64), NEON (aarch64/arm64), and VSX (ppc64le):   numpy#16247</li> <li>PyTorch <code>softmax</code>, <code>min</code> and <code>max</code> 3x-4x faster for <code>bfloat16</code> with   AVX2/AVX512 on x86-64:   pytorch#55202,   and up to 2x-10x with <code>uint8</code> for <code>+</code>, <code>&gt;&gt;</code>, <code>min</code>:   pytorch#89284</li> <li>Using AVX2 instead of SSE in SciPy's 2-D Fourier transforms:   scipy#16984</li> </ul> <p>It is safe to say that performance gains that large, for single-threaded execution in libraries that are so widely used, are extremely important.</p>"},{"location":"key-issues/simd_support/#current-state","title":"Current state","text":"<p>As of December 2022, there is no support on PyPI, in the wheel spec, or in any widely used packaging tool for binaries containing SIMD instructions. Nor a plan to implement such support. The only relevant metadata is the \"platform compatibility tag\" in a wheel name, first defined in PEP 425 and now maintained under PyPA specifications in the Python Packaging User Guide. A platform tag defines a CPU family, for example <code>x86_64</code> for 64-bit x86 CPUs and <code>aarch64</code> for 64-bit ARM CPUs.</p> <p>Projects that want to distribute wheels containing SIMD instructions have effectively three choices:</p> <ol> <li>Make a single choice of SIMD instructions to include.</li> <li>Build extension modules with multiple SIMD flavors inside, detect CPU    capabilities at runtime, and then dynamically choose the optimal binary    code.</li> <li>Create separate packages on PyPI with a different package name but the same    import name, and containing wheels with newer instructions. Then let users    manually install those alternative packages.</li> </ol> <p>Choice (1) implicitly defines what CPUs are supported by their package. Given that unsupported instructions result in very obscure errors, this means targeting SIMD instruction sets that are at least 10 years old (sometimes more). Choice (2) results in improved performance, because newer SIMD instructions can be used. However, this comes at the cost of a large amount of code complexity and larger wheel sizes.</p> <p>In practice, only the largest and most widely used projects are able to make choice (2). And they indeed do so - TensorFlow, PyTorch, OpenCV, NumPy, and MXNet all have their own machinery and methods to work with SIMD instructions.</p> <p>There are not many examples of choice (3). The ones that do exist, e.g. Pillow-SIMD and Intel(R) Extension for scikit-learn, tend to be forks by a third party rather than packages created by the original development team.</p> <p>Distributing binaries with SIMD instructions is not something many other packaging systems have an answer for. Exceptions are Spack and Julia's Pkg.jl1. Spack has builtin capabilities through <code>archspec</code> for installing optimized binaries. This will even be surfaced in its resolver; individual package entries will contain a tag like <code>-skylake_avx512</code> (microarchitecture + highest supported instruction set). The <code>archspec</code> paper is worth reading for a thorough discussion of the design aspects of integrating support for SIMD instructions, and dealing with CPU compatibility in a packaging system in a more granular fashion. <code>Pkg.jl</code> can serve binaries for Julia packages optimized for the user's CPU architecture - see for example finufft_jll.jl and the listed binaries in its README (e.g. <code>Windows x86_64 {cxxstring_abi=cxx11, march=avx}</code> and <code>march=avx2</code>, <code>march=avx512</code> variants).</p>"},{"location":"key-issues/simd_support/#problems","title":"Problems","text":"<p>Writing SIMD instructions is a specialized skill, however it can be effective to do so in only a few performance hotspots of the code. So it is often worthwhile, if it weren't for the problems around distributing wheels on PyPI. To illustrate how prohibitively expensive in terms of developer time the dynamic dispatch solution is: NumPy only gained support for it in 2020, and SciPy still does not have it (it chooses SSE3 instructions, first released in 2005, as the most recent instructions that are allowed to be used on x86).</p> <p>Less sophisticated methods employed in the wild are compiling the project twice (e.g. once with SSE3 and once with AVX2), and defaulting to importing the latter while falling back to the former. Obviously this doubles binary size.</p> <p>The \"distribute separate wheels under a different package name (choice 3 above) is so user-unfriendly, and also fairly labor-intensive, that we cannot think of a single open source project that does this on PyPI.</p> <p>The \"choose a baseline and compile only for that\" (choice 1 above) is the easiest choice that still allows using some SIMD instructions - and the difference between some (e.g. up to SSE3) and none at all can still be very large in terms of performance gain. However, this still leaves some users with old or nonstandard CPUs out in the cold, and it forces package authors to come up with a method for choosing that maximum feature set. The rule of thumb that NumPy and SciPy came up with is: if the number of users with incompatible CPUs stays below 0.5% (as determined by some publicly available data from browser and gaming vendors), then it's okay to use a particular feature. This is not ideal, but tends to lead to few complaints in practice.</p>"},{"location":"key-issues/simd_support/#history","title":"History","text":"<p>Distributing packages containing SIMD code on PyPI came up a number of times on the distutils-sig mailing list, as well as more recently on Discourse:</p> <ul> <li>Handling the binary dependency management problem   thread on distutils-sig (2013)</li> <li>Warning about potential problems for wheels   thread on distutils-sig (2015)</li> <li>Status update on the NumPy &amp; SciPy vs SSE problem?   thread on distutils-sig (2016)</li> <li>Archspec: a library for labeling optimized binaries   on a Packaging thread on Discourse (2020)</li> <li>Idea: selector packages   on a Packaging thread on Discourse (2020)</li> </ul> <p>Even before wheels existed, NumPy and SciPy were already distributing <code>.exe</code> Windows installers for three SIMD flavors (no SIMD, up to SSE2, and up to SSE3, see for example pypi.org/project/numpy/1.5.1/#files.</p>"},{"location":"key-issues/simd_support/#relevant-resources","title":"Relevant resources","text":"<p>Links to key issues, forum discussions, PEPs, blog posts, etc.</p> <ul> <li>NEP 38 - Using SIMD optimization instructions for performance   (see also the \"Related Work\" section in that NEP for more relevant projects)</li> <li><code>archspec</code> - a library for detecting, labeling, and reasoning about microarchitectures:   GitHub repo, paper</li> <li><code>pytorch/cpuinfo</code> - CPU INFOrmation library: GitHub repo</li> <li><code>xsimd</code> - C++ wrappers for SIMD intrinsics and parallelized, optimized mathematical functions:   GitHub repo</li> <li>Spack's docs on support for specific microarchitectures</li> </ul>"},{"location":"key-issues/simd_support/#potential-solutions-or-mitigations","title":"Potential solutions or mitigations","text":"<p>There are few potential solutions on the Python packaging side that look promising:</p> <ul> <li>New wheel tags for specific microarchitectures is a blunt instrument, and   there are too many microarchitectures to consider for this to work well,</li> <li>Using a library like <code>archspec</code> by packaging tools is very likely too complicated,</li> <li>The selector packages idea   seemed promising at first, but seems to have fallen out of favor now.</li> </ul> <p>The most likely path forward to improve the current situation is to make it easier to share and reuse infrastructure for CPU feature detection and runtime dispatch. With <code>archspec</code> and <code>pytorch/cpuinfo</code> there are two solid libraries available for feature detection. The NumPy and Meson projects are planning to collaborate to make the \"multiple compilation for different CPU capabilities\" part available as a build system feature. If the runtime dispatch part could be implemented as a standalone, vendorable component, perhaps it will become easier for other projects to go this route.</p> <ol> <li> <p>The capabilities of Julia's package manager aren't directly relevant to Python users, however it's still instructive to see a language-specific package manager that is SIMD-aware.\u00a0\u21a9</p> </li> </ol>"},{"location":"key-issues/unexpected_fromsource_builds/","title":"Unsuspecting users getting failing from-source builds","text":""},{"location":"key-issues/unexpected_fromsource_builds/#current-state","title":"Current state","text":"<p>When a project makes a release, it typically uploads one sdist (a source distribution) and multiple wheels (binary installers). Wheels are primarily meant to make the installation experience better and faster. For projects which contain code that needs to be compiled (e.g., C/C++/Cython), installing from the sdist is challenging. The sdist metadata does not even allow expression the required dependencies (e.g., a compiler - see native dependencies). Hence installing from an sdist often goes wrong. Why does a user get an sdist when they didn't expect one? This can happen in quite a few circumstances:</p> <ul> <li>Shortly after the release of a new Python version, most projects will not yet   have wheels for that new Python version uploaded to PyPI. So when a user   installs the \"latest and greatest\" Python and type <code>pip install somepackage</code>,   they are likely to see <code>pip</code> try to install the sdist of the highest version   of <code>somepackage</code>.</li> <li>In case new hardware becomes available. A recent example is macOS arm64: it   took many scientific projects over a year before they were able to build   <code>arm64</code> or <code>universal2</code> wheels and upload them to PyPI. All users which used   a native arm64 Python were getting builds from sdist.</li> <li>Users who use an old <code>pip</code> version (e.g. the <code>pip</code> shipped with their distro   on a typical HPC cluster) which does not have support for recent <code>manylinux</code>   versions may see <code>pip</code> try to install from an sdist even though there are   (say) <code>manylinux2014</code> wheels for the package.</li> <li>Installs from sdist may happen if a project tags a release but there's a   problem on a particular platform for which it normally uploads wheels.   Especially if this is a less popular platform (e.g., <code>ppc64le</code>) the release   manager may just go ahead with the release, and aim to upload the missing   wheels later.</li> <li>If a project is uploading a new version and the person doing the release   isn't careful to upload all wheels first and the sdist afterwards, then users   on any platform may see installers try to install from the sdist. This   mistake is easy to make, and can lead to a lot of failed installs quickly if   a package is popular (e.g., the download rate for <code>numpy</code> is ~2000/minute).</li> </ul> <p>Many years ago, users were expecting to build from source. Today, in 2022, the scientific Python ecosystem has tens of millions of users. The vast majority of those users are not expecting, and are often unable, to build from source when they type a command like <code>pip install scikit-learn</code>.</p>"},{"location":"key-issues/unexpected_fromsource_builds/#problems","title":"Problems","text":"<p>There clearly are a lot of issues due to installing from an sdist when the user did not intend to do that. For users:</p> <ul> <li>Failed installs, often with confusing error messages and after a possibly   time-consuming build step.</li> <li>Installs that appear to succeed but have issues that show up at runtime as a   result of building against incorrect or mismatching libraries. This ranges   from import errors due to missing symbols in shared libraries to segfaults   and silently wrong numerical results.</li> </ul> <p>For <code>pip</code> maintainers: a lot of bug reports they have to deal with because the user thinks <code>pip</code> is the cause rather than the package they tried to install.</p> <p>For maintainers of projects with compiled code:</p> <ul> <li>A lot of bug reports that are very time-consuming to address. Issues are   often not reproducible, and bug reports typically do not contain enough   information to be able to understand if the problem is user error or an   actual bug in the project.</li> <li>A lot of time spent carefully managing build dependencies and their versions   in <code>pyproject.toml</code> (see, e.g., the   oldest-supported-numpy metapackage)   which has as its only purpose to serve as a build dependency which pins   <code>numpy</code> to the correct version (typically the lowest version for which there   are wheels on PyPI) per platform and Python version/interpreter.</li> <li>Being forced to support platforms that are already end of life, because the   project does not have a good way of dropping support for older <code>manylinux</code>   flavors (see, e.g.,   numpy#19192).</li> </ul>"},{"location":"key-issues/unexpected_fromsource_builds/#history","title":"History","text":"<p>TODO</p>"},{"location":"key-issues/unexpected_fromsource_builds/#relevant-resources","title":"Relevant resources","text":"<p>TODO</p>"},{"location":"key-issues/unexpected_fromsource_builds/#potential-solutions-or-mitigations","title":"Potential solutions or mitigations","text":"<ol> <li>Do not upload sdists to PyPI at all. This is the approach taken by many of    the projects with the most complex builds - for example PyTorch, TensorFlow,    MXNet, jaxlib, and Ray. It is necessary to then delete every single sdist    for any version of the package from PyPI - if there was a single sdist for    version 0.1.0, even yanking that is not enough (PyTorch found this out the    hard way, some long-running issues were closed when deleting old yanked    sdists).</li> <li>Change the behavior of installers to not use sdists by default. Make it easy    for users to opt in to installing from source, but by default only look for    wheels and error out with a clear message if no wheels matching the users'    platform and Python interpreter are found.    The <code>pip</code> maintainers recently agreed to take this direction, see pypa/pip#9140.    Also note that it's recommended to upload wheels even for projects that are    pure Python, because installs are faster (metadata in a wheel is static, no    need to run `setup.py - see    this blog post    for a more detailed explanation). There are very few packages which would be    unable to upload a wheel.</li> <li>Let individual packages determine the behavior of installers (try to install    from sdist, or error out) via metadata on PyPI somehow.</li> <li>Individual solutions for some of the separate issues. For example, reduce    the load on <code>pip</code> maintainers via better error messages, and let projects    who want to drop support for old <code>manylinux</code> versions detect the <code>pip</code>    version in their build scripts/files, and error out if a too old version is    detected.</li> </ol>"},{"location":"key-issues/native-dependencies/","title":"Native dependencies","text":"<p>Depending on non-Python compiled dependencies (\"native dependencies\") is very tricky. Python packaging works reasonably well when a project contains some self-contained C, C++ or Cython code. Even then, issues can occur though - for example because the dependency on a C or C++ compiler cannot be expressed in package metadata. So any constraints on versions, compiler types, etc. can only be documented and not enforced1.</p> <p>C, C++ and Cython are not the only languages that need native dependencies - Fortran, CUDA, and Rust are other commonly used languages, and there are more languages that one may want to use (e.g., in the context of scientific computing and GPUs, OpenCL, HIP and SYCL are of increasing interest).</p> <p>Once such code starts to depend on APIs from non-Python projects, more problems show up.</p>"},{"location":"key-issues/native-dependencies/#current-state","title":"Current state","text":"<p>One obvious and hard to deal with problem is that dependencies on libraries that are not on PyPI cannot be expressed. When one types <code>pip install somepkg</code> for a <code>somepkg</code> that has such dependencies on a platform that <code>somepkg</code> doesn't provide wheels for, what is most likely to happen is a build failure halfway through because a dependency is missing or is present but in an unexpected configuration.</p> <p>Example: SciPy's build and runtime dependencies</p> <p>SciPy has a few build-time dependencies and one runtime dependency (<code>numpy</code>) listed in its <code>pyproject.toml</code>. As a package with medium build complexity (more complex than projects with self-contained C/Cython extensions, but less than the likes of TensorFlow and PyArrow), it can serve as an example of what metadata can and cannot capture about dependencies. This diagram illustrates those dependencies:</p> <p> </p> <p>Out of those, these are the dependencies declared in <code>pyproject.toml</code>: <code>numpy</code>, <code>Cython</code>, <code>pybind11</code>, and <code>pythran</code> (also the build system dependencies: <code>meson-python</code>, <code>wheel</code>). And these are the dependencies that cannot be declared:</p> <ul> <li>C/C++ compilers</li> <li>Fortran compiler</li> <li>BLAS and LAPACK libraries</li> <li><code>*-dev</code> packages for Python, BLAS and LAPACK, if headers are packaged separately</li> <li>pkg-config or system CMake (for dependency resolution of BLAS/LAPACK)</li> </ul> <p>Finally, a number of native libraries (Boost, ARPACK, HiGHS, etc.) are vendored into SciPy. Unvendoring those (something system packagers would like) has been deemed infeasible2, those dependencies would also not be expressible and therefore make the build more fragile.</p> <p>Some projects do upload sdists but advise users to avoid them (or avoid PyPI completely in favor of other package managers). Some other projects do not upload sdists to PyPI to avoid users filing issues about failing builds. See purposes of PyPI for more on this topic.</p> <p>Building wheels is challenging too. Wheels are required to be self-contained, and therefore must vendor those non-Python dependencies. This means that a project becomes responsible for (often) rebuilding the dependency, dealing with the vendoring process (through <code>auditwheel</code>, <code>delocate</code>, <code>delvewheel</code>, etc. - and sometimes those tools are not enough), and implementing static linking or other ways of slimming down wheel sizes when vendoring large libraries. There may be other issues with vendoring, like EULA's for libraries like CUDA and MKL being ambiguous or outright forbidding redistribution.</p> <p>Even when the vendoring hurdle is successfully taken and working wheels are produced, there may be problems because vendoring may be the wrong solution technically. E.g., runtimes are often designed with the assumption that they're the only runtime on a given system - so having multiple vendored copied of a runtime in different packages leads to conflicts.</p> <p>Native dependencies is a huge topic, so to make the problems more concrete, a number of cases are worked out:</p> <ul> <li>BLAS, LAPACK and OpenMP,</li> <li>The Geospatial stack,</li> <li>Complex C++ dependencies.</li> </ul>"},{"location":"key-issues/native-dependencies/#problems","title":"Problems","text":"<p>The key problems are (1) not being able to express dependencies in metadata, and (b) the design of Python packaging and the wheel spec forcing vendoring dependencies.</p> <p>For more detailed explanations of problems, see the concrete cases linked above.</p>"},{"location":"key-issues/native-dependencies/#history","title":"History","text":"<ul> <li>PEP 426, section \"Mapping dependencies to development and distribution activities\" (2012, withdrawn).</li> <li>PEP 459 - \"Standard Metadata Extensions for Python Software Packages\"   (2013, withdrawn). This is probably the most relevant PEP that has been   proposed - it explicitly deals with native dependencies provided by the   system.</li> <li>Nathaniel Smith's <code>pynativelib</code> proposal   (2016).</li> <li>PEP 668 - Marking Python base environments as \u201cexternally managed\u201d (2021).</li> </ul> <p>More history TODO</p>"},{"location":"key-issues/native-dependencies/#relevant-resources","title":"Relevant resources","text":"<p>TODO</p>"},{"location":"key-issues/native-dependencies/#potential-solutions-or-mitigations","title":"Potential solutions or mitigations","text":"<p>From the \"Wanting a singular packaging tool/vision\" Discourse thread (2022):</p> <ul> <li>Define \"native requirements\" metadata (even if <code>pip</code> ignores it)</li> <li>Allow (encourage) wheels with binaries to have tighter dependencies than their sdists</li> <li>Encode and expose more information about ABI in package requirements</li> </ul> <p>Adding a mechanism to specify system dependencies that are needed by a Python package seems like a tractable first step here.</p> <ul> <li>Provide a way for users to get pure Python packages from PyPI, and everything   else from a system package manager.</li> <li>... many other potential improvements (all a lot of work).</li> </ul> <ol> <li> <p>As a simple example, let's use Pythran - a Python to C++ transpiler that is gaining popularity and is used in SciPy and scikit-image. On Windows it needs Clang-cl rather than MSVC. This often goes wrong, because most users don't have Clang-cl installed.\u00a0\u21a9</p> </li> <li> <p>With Meson as the new build system for SciPy, it is becoming possible to query the system for dependencies first, and only fall back to a vendored version if the system is not found. This may be done in the future.\u00a0\u21a9</p> </li> </ol>"},{"location":"key-issues/native-dependencies/blas_openmp/","title":"BLAS, LAPACK and OpenMP","text":"<p>BLAS, LAPACK and OpenMP are key libraries for scientific computing. BLAS and LAPACK provide linear algebra functionality, and OpenMP provides primitives for parallel computing on shared memory machines. They're written in C, C++, Fortran, and even some assembly code. They are typically not packaged on PyPI (MKL is the exception). The most popular libraries for BLAS and LAPACK are OpenBLAS and MKL; they provide both BLAS and LAPACK1. NumPy and SciPy depend on BLAS and LAPACK; scikit-learn depends on OpenMP. BLAS and LAPACK libraries themselves can be built to use OpenMP or pthreads.</p> <p>Two things make dealing with these native dependencies extra challenging:</p> <ol> <li>There are multiple independent implementations of the BLAS, LAPACK and    OpenMP API specifications. They adhere to the same API, but may be built    with different ABI, make different choices for symbol names for 64-bit    builds, etc.</li> <li>All packages in an environment should use the same library for each of    BLAS, LAPACK and OpenMP, because otherwise issues with threading control    will occur. This is difficult to guarantee if wheels must be self-contained;    it's clearly at odds with vendoring.</li> </ol> What are BLAS and LAPACK exactly? <p>BLAS (Basic Linear Algebra Subprograms) are routines for basic vector and matrix operations. LAPACK\u2009(Linear Algebra PACKage) builds on top of BLAS and provides more complex linear algebra routines. Both have a reference implementation in the Netlib repository, written in Fortran: BLAS, LAPACK. BLAS also has a reference C API, named CBLAS which is widely implemented; LAPACK correspondingly has a C API named LAPACKE, however that is less widely implemented.</p> <p>A lot of libraries implement the BLAS and LAPACK interfaces. This is typically done to obtain maximum performance, and optimized for particular hardware. The performance improvements over the Netlib version are often in the 10x-100x range, and given how critical linear algebra is to scientific computing and deep learning, these libraries and their performance characteristics are of major importance.</p> <p>Well-known implementations include OpenBLAS, Intel MKL, Apple Accelerate, ATLAS (no longer updated, but still shipped especially by Linux distros), BLIS (BLAS-only) and libflame (LAPACK-only, builds on BLIS), AMD's AOCL-BLIS and AOCL-libFLAME, and ARM Performance Libraries. Those are all for CPU; there are more libraries for GPUs and other accelerators, as well as libraries supporting sparse and graph data structures.</p> What is OpenMP exactly? <p>OpenMP (Open Multi-Processing) is an API that supports shared-memory parallel programming in C, C++ and Fortran. It is widely used, from regular laptop/desktop to large supercomputers. There are many implementations, often shipped together with compilers. Commonly used implementations (which we may find vendored in wheels on PyPI) include the GCC implementation (<code>libgomp</code>), the LLVM implementation (<code>libomp</code>), and the Intel implementation (<code>libiomp</code>). For a comprehensive overview, see this overview.</p>"},{"location":"key-issues/native-dependencies/blas_openmp/#current-state","title":"Current state","text":"<p>NumPy vendors OpenBLAS as a shared library in the wheels it uploads to PyPI. SciPy also vendors OpenBLAS, in the same manner as NumPy - just not the same version, NumPy moved to ILP64 (64-bit) OpenBLAS while SciPy uses the default 32-bit build. Those OpenBLAS libraries are built with pthreads. In conda-forge and Homebrew on the other hand, OpenBLAS is built with OpenMP. The OpenBLAS build for wheels requires a separate repository with CI - see macPython/openblas-libs. The build is maintained mostly by NumPy and SciPy maintainers - and as can be seen from the history in the repository, it's a lot of work. To make matters worse, NumPy and SciPy want tight control over the version of OpenBLAS they ship with, because another version may cause segfaults or wildly incorrect numerical results. Hence upgrading is very hard. Things have gotten a little better recently though, and it may be an option to start depending on OpenBLAS as a separate package with a version range rather than an exact pin. openblas-libs#86 discussed in-progress work to create a separate wheel for OpenBLAS; not ideal to have to maintain that, but an improvement over vendoring separate versions in NumPy and SciPy wheels.</p> <p>Scikit-learn depends on OpenMP directly for an increasing amount of its parallel execution, and vendors <code>libomp</code>/<code>libgomp</code> in its wheels. It depends on SciPy for linear algebra functionality - in particular, the Cython interface to BLAS and LAPACK that SciPy provides. The scikit-learn team also created  <code>threadpoolctl</code>, a separate package specifically to control the parallelism across NumPy, SciPy, scikit-learn, and any installed BLAS, LAPACK and OpenMP libraries.</p> <p>PyTorch statically links MKL (except on macOS) and vendors OpenMP (<code>libiomp</code> on Windows/macOS, <code>libgomp</code> on Linux) in its wheels.</p> <p>TensorFlow uses Eigen for linear algebra functionality. This is a header-only C++ library, different from BLAS/LAPACK implementations and easier for distribution. For parallel execution, TensorFlow does use OpenMP. It is statically linked rather than vendored.</p> <p>Deep learning libraries are often their own \"silo\", providing all functionality in one coherent framework. When they are installed side-by-side with other packages, there are issues though with conflicting libraries. However, the problem is worse in the PyData stack. Here is what the situation look for just NumPy, SciPy and scikit-learn:</p> <p> </p>  Build and runtime dependencies for scikit-learn - showing how BLAS, LAPACK and OpenMP are included in an environment when installing either from wheels on PyPI, or from conda-forge or a similar such system that includes all required dependencies as separate packages.  <p>As we can see, there are multiple issues that are unique to PyPI:</p> <ul> <li>We have multiple copies of OpenBLAS rather than just one. Also different   versions, breaking the \"one version rule\",</li> <li>No runtime switching of BLAS libraries, because of vendoring,</li> <li>Mixing pthreads and OpenMP parallelism, resulting in oversubscription issues,</li> <li>A diamond dependency, where NumPy and SciPy both depend on OpenBLAS. Making   upgrades that not synchronized harder, even if those projects will be able to   release a single OpenBLAS wheel in the future.</li> </ul> <p>When for example PyTorch is installed, the problems multiply - now we also have a second vendored OpenMP library in addition to two BLAS/LAPACK libraries.</p> <p>Example: PyTorch &amp; OpenMP</p> <p>PyTorch makes heavy use of OpenMP. And has a lot of issues with it - partly because OpenMP is inherently complex, and partly because of packaging limitations. One recurring problem is deadlocks in combination with <code>multiprocessing</code> (see, e.g., pytorch#17199). These are caused by the GCC implementation of OpenMP (<code>libgomp</code>) not being fork-safe, and <code>multiprocessing</code> defaulting to <code>'fork'</code>. The LLVM (<code>libomp</code>) and Intel (<code>libiomp</code>) implementations are fork-safe, therefore if the dependency could be expressed in package metadata, it would be easier to avoid the problem. The dependency of PyTorch on OpenMP is completely implicit in <code>pyproject.toml</code>/<code>setup.py</code> metadata however.</p> <p>Here is another example issue, where a PyTorch build inside a virtualenv picks up an OpenMP implementation in an uncontrolled fashion, because it's an implicit dependency and hence build results get affected by another package pulling in an OpenMP library:  pytorch#18398.</p> <p>Note: there is an active discussion (cpython#84559, Discourse thread - Dec'22) to change the default <code>multiprocessing</code> context away from <code>'fork'</code>.</p> <p>System package managers usually have a way of dealing with multiple implementations of an API, through building against a reference package with stubs as a \"virtual dependency\". This can be a generic mechanism, or specific to the dependency type.</p> <p>Conda manages BLAS, LAPACK and OpenMP (and other such complex dependencies, like MPI) through mutex metapackages, which ensure a single version of an implementation is installed and allow users to switch between implementations. Spack uses virtual dependencies which work in a similar fashion.</p> <p>Linux package managers may do something similar (e.g., Debian uses <code>update-alternatives</code> applied to <code>libblas</code> and <code>liblapack</code>), or they may use a more a more specific way of managing BLAS and LAPACK, such as Fedora using Flexiblas.</p> BLAS/LAPACK demuxing2: FlexiBLAS, libblastrampoline &amp; SciPy's <code>cython_blas</code>/<code>cython_lapack</code> <p>Supporting multiple BLAS and LAPACK libraries is quite challenging, because of API and ABI incompatibilities between them. In particular:</p> <ul> <li>API's using 32-bit (LP64) or 64-bit (ILP64) integers as indices of   vectors/matrices (see   here   for details). Typically a BLAS/LAPACK library supports both at the   source level, and how the library is built determines which one is used.   ILP64 builds may or may not use a symbol suffix - <code>64_</code> being the common   one, but that's not a universal convention.</li> <li>g77 vs. gfortran ABI. MKL and Apple Accelerate use the g77 ABI (or \"f2c   calling convention\"), while all other common libraries use the gfortran   ABI.</li> </ul> <p>In addition, libraries may implement different versions of the reference Netlib APIs, and CBLAS and LAPACKE support are not universal. To deal with this, a demuxing library (or wrapper library) may be a good solution. Its job is to provide a uniform API and ABI to any package using it. There are several examples of this: FlexiBLAS3 is a standalone library to do this at the C/Fortran level, libblastrampoline does this for Julia, and SciPy's <code>scipy.linalg.cython_[blas|lapack]</code> submodules provide a C/Cython interface to other Python packages.</p> <p>If other Python packages can accept a dependency on SciPy, that's their best option. SciPy itself has to deal with the full complexity of discovering and building against arbitrary BLAS/LAPACK libraries.</p>"},{"location":"key-issues/native-dependencies/blas_openmp/#problems","title":"Problems","text":"<ol> <li>Building from source is quite difficult. Dependencies on BLAS, LAPACK and    OpenMP cannot be expressed, and end users will typically not have it    installed, or they do have it but it's not found, or it's the wrong version.    In addition, variations between system package managers are not easy to    handle (e.g., Fedora fails to ship pkg-config files for OpenBLAS, Arch Linux    fails to include LAPACK in OpenBLAS, etc.).</li> <li>Building wheels is way too much work. Maintainers of each project using BLAS    and LAPACK are responsible for building it themselves (which is painful) and    then vendoring it. In addition, in the case of OpenBLAS, it requires    vendoring <code>libgfortran</code>.</li> <li>Deadlocks due to use of <code>multiprocessing</code> in combination with <code>libgomp</code>.</li> <li>Issues due to using more than one library of the same type. See for example    scipy#15050 (\"Performance    issue on macOS arm64 (M1) when installing from wheels (2x libopenblas)\") and    openblas#3187     (\"Slowdown when using openblas-pthreads alongside openmp based parallel code\").</li> <li>As a result of the above-mentioned problems with OpenMP, SciPy bans usage of    OpenMP completely even though it would be of significant interest to use    OpenMP. Scikit-learn is gradually expanding its usage of OpenMP, but is    running into problems.</li> <li>No runtime switching of implementations when installing from wheels. This    makes testing, benchmarking and development work more difficult.</li> <li>MKL does provide wheels but cannot be linked to due to the wheel spec. And    MKL itself is &gt;100 MB in size, so vendoring it isn't reasonable.</li> </ol>"},{"location":"key-issues/native-dependencies/blas_openmp/#history","title":"History","text":"<p>TODO</p>"},{"location":"key-issues/native-dependencies/blas_openmp/#relevant-resources","title":"Relevant resources","text":"<ul> <li>scipy#10239 - can OpenMP be used portably </li> <li>array-api#4 - Parallelism - what do libraries offer, and is there an API aspect to it</li> <li>OpenBLAS build config for vendoring into wheels:   MacPython/openblas-libs</li> </ul>"},{"location":"key-issues/native-dependencies/blas_openmp/#potential-solutions-or-mitigations","title":"Potential solutions or mitigations","text":"<ul> <li>A mitigation to not make things worse: stay with the status quo, do not use   more OpenMP. Not a very satisfactory one though.</li> <li> <p>Build wheels for OpenBLAS and perhaps also OpenMP and maintain those on PyPI.</p> <ul> <li> <p>Issue: who takes responsibility for these, and decides on changes over   time (possibly breaking ones)?</p> </li> <li> <p>See this gradual evolution plan discussed between scikit-learn and SciPy   maintainers:   scipy#15050</p> </li> </ul> </li> <li> <p>Larger changes to PyPI/wheels to get to parity with system package managers.   This will require dealing with several \"meta topics\", like   a build farm and   PyPI's author-led social model,   in addition to implementing something like virtual packages.</p> </li> <li>Making it possible to express dependencies on libraries outside of PyPI.</li> <li>Making a distinction on PyPI between pure Python packages and other packages.   With the latter set of packages all being provided by a system package   manager.</li> </ul> <ol> <li> <p>Note that it is possible to build OpenBLAS without LAPACK support. This is a bad idea, however Arch Linux does do this anyway (as of Dec 2022, see scipy#17465). Accounting for such nonstandard choices by individual packagers of system dependencies makes dealing with native dependencies extra difficult.\u00a0\u21a9</p> </li> <li> <p>The term demuxing here stands for demultiplexing, in the sense of splitting a single \"signal\" (e.g. multiply these two matrices) into several channels for the various supported implementations of BLAS/LAPACK.\u00a0\u21a9</p> </li> <li> <p>Note that FlexiBLAS is GPLv3 licensed, with a LGPL-like runtime exception that only covers the Netlib-equivalent part of its API (that may not be enough, see scipy#17362).\u00a0\u21a9</p> </li> </ol>"},{"location":"key-issues/native-dependencies/cpp_deps/","title":"Complex C++ dependencies","text":"<p>Projects with a large amount of C++ code and dependencies include TensorFlow, PyTorch, Apache Arrow, Apache MXNet, cuDF, Ray, ROOT, and Vaex. Many other projects include some C++ components, like: scikit-learn, SciPy, NumPy, CuPy, and Awkward Array.</p> <p>To get an impression of the number and type of external dependencies that some of these projects have, outside of their own large code bases, one can look at the \"third party\" directories in their repositories: pytorch/third_party, tensorflow/third_party, mxnet/3rdparty.</p> <p>There are usually more build time dependencies that are specified elsewhere - some on PyPI, some only listed in the documentation. Projects with dependencies like that tend to not upload any sdist's to PyPI (users will see too many build failures, see purposes of PyPI for context), and have a hard time building wheels because of the requirement that a wheel must be self-contained - which means a lot of vendoring and potential issues.</p>"},{"location":"key-issues/native-dependencies/cpp_deps/#current-state","title":"Current state","text":"<p>Wheels tend to work fine for packages that have some C, C++ or Cython code but no external dependencies other than Python packages. Once a project has dependencies on other C++ libraries, it has to build that other library and vendor it as part of building its own wheel. Tools like <code>auditwheel</code>, <code>delocate</code> and <code>delvewheel</code> help with the vendoring part, but building everything in a consistent fashion is (a) a lot of work, and (b) may be very difficult.</p> <p>Why are wheels hard - Wes McKinney</p> <p>The Python wheel binary standard was optimized for easy installation of packages with C extensions, but where those C extensions are simple to build. The best case scenario is that the C code is completely self-contained.</p> <p>If things are more complicated, things get messy:</p> <ul> <li>Third party C libraries</li> <li>Third party C++ libraries</li> <li>Differing C++ ABI versions</li> </ul> <p>The constraint of wheels is that a package must generally be entirely self-contained, including all C/C++ symbols included via static linking or by including the shared library bundled in the wheel -- which style of bundling works best may be different for Linux, macOS, and Windows.</p> <p>Only very recently (Oct '22) was the requirement for wheels to be fully self-contained loosened a little, allowing package authors to take responsibility for the quality of their own wheels and avoiding vendoring of libraries that are very large or had to be vendored into multiple wheels that they have control over: auditwheel#368. That change is an improvement, but doesn't change the big picture - package authors still cannot rely on other native dependencies on the system easily, and may have to maintain their own separate wheels (e.g., if SciPy and NumPy want to rely on a shared <code>libopenblas</code> wheel, they are the ones who have to do all the work for that).</p> <p>Example: PyArrow</p> <p>PyArrow is the Python API of Apache Arrow. Apache Arrow is a C++ project with many C and C++ dependencies. Large and complicated ones. In 2019 the need to vendor the likes of OpenSLL, gRPC, and Gandiva (which in turn relies on LLVM) made it too hard to build wheels for PyPI at all - because all dependencies must  be built from source and vendored into a wheel, which is a major endeavour. As of Dec 2022, there are wheels again, without OpenSSL and Gandiva in them. TODO: figure out in more detail what changed here</p> <p>To understand the C/C++ dependencies of PyArrow, let's look at the dependency tree in conda-forge and at the libraries vendored into a manylinux wheel on PyPI:</p> PyArrow dependency tree (conda-forge) <pre><code>$ # Note: output edited to remove duplicate packages and python/numpy dependencies\n$ mamba repoquery depends pyarrow --tree\n\npyarrow[9.0.0]\n\u251c\u2500 libgcc-ng[12.2.0]\n\u2502  \u251c\u2500 _openmp_mutex[4.5]\n\u2502  \u2502  \u251c\u2500 _libgcc_mutex[0.1]\n\u2502  \u2502  \u2514\u2500 libgomp[12.2.0]\n\u251c\u2500 libstdcxx-ng[12.2.0]\n\u251c\u2500 numpy[1.23.5]\n\u251c\u2500 parquet-cpp[1.5.1]\n\u2502  \u2514\u2500 arrow-cpp[9.0.0]\n\u2502     \u251c\u2500 gflags[2.2.2]\n\u2502     \u251c\u2500 c-ares[1.18.1]\n\u2502     \u251c\u2500 libbrotlienc[1.0.9]\n\u2502     \u2502  \u2514\u2500 libbrotlicommon[1.0.9]\n\u2502     \u251c\u2500 libbrotlidec[1.0.9]\n\u2502     \u251c\u2500 zstd[1.5.2]\n\u2502     \u251c\u2500 aws-sdk-cpp[1.8.186]\n\u2502     \u2502  \u251c\u2500 aws-c-event-stream[0.2.7]\n\u2502     \u2502  \u2502  \u251c\u2500 aws-c-common[0.6.2]\n\u2502     \u2502  \u2502  \u251c\u2500 aws-checksums[0.1.11]\n\u2502     \u2502  \u2502  \u2514\u2500 aws-c-io[0.10.5]\n\u2502     \u2502  \u2502     \u251c\u2500 aws-c-cal[0.5.11]\n\u2502     \u2502  \u2502     \u2514\u2500 s2n[1.0.10]\n\u2502     \u2502  \u251c\u2500 libcurl[7.86.0]\n\u2502     \u2502  \u2502  \u251c\u2500 krb5[1.19.3]\n\u2502     \u2502  \u2502  \u2502  \u251c\u2500 libedit[3.1.20191231]\n\u2502     \u2502  \u2502  \u2502  \u2514\u2500 keyutils[1.6.1]\n\u2502     \u2502  \u2502  \u251c\u2500 libssh2[1.10.0]\n\u2502     \u2502  \u2502  \u2514\u2500 libnghttp2[1.47.0]\n\u2502     \u2502  \u2502     \u2514\u2500 libev[4.33]\n\u2502     \u251c\u2500 lz4-c[1.9.3]\n\u2502     \u251c\u2500 libthrift[0.16.0]\n\u2502     \u2502  \u2514\u2500 libevent[2.1.10]\n\u2502     \u251c\u2500 libutf8proc[2.8.0]\n\u2502     \u251c\u2500 snappy[1.1.9]\n\u2502     \u251c\u2500 re2[2022.06.01]\n\u2502     \u251c\u2500 glog[0.6.0]\n\u2502     \u251c\u2500 libabseil[20220623.0]\n\u2502     \u251c\u2500 libprotobuf[3.21.10]\n\u2502     \u251c\u2500 orc[1.8.0]\n\u2502     \u251c\u2500 libgrpc[1.49.1]\n\u2502     \u2502  \u251c\u2500 zlib[1.2.13]\n\u2502     \u2514\u2500 libgoogle-cloud[2.3.0]\n\u2502        \u251c\u2500 libcrc32c[1.1.2]\n\u251c\u2500 python_abi\n  \u251c\u2500 python\n  \u251c\u2500 numpy\n  \u2514\u2500 arrow-cpp\n</code></pre> PyArrow vendored libraries (PyPI wheels) <pre><code>$ ls pyarrow/*.so  # pyarrow/ is from an unzipped manylinux wheel\n/home/rgommers/Downloads/pyarrow/_compute.cpython-311-x86_64-linux-gnu.so\n/home/rgommers/Downloads/pyarrow/_csv.cpython-311-x86_64-linux-gnu.so\n/home/rgommers/Downloads/pyarrow/_dataset.cpython-311-x86_64-linux-gnu.so\n/home/rgommers/Downloads/pyarrow/_dataset_orc.cpython-311-x86_64-linux-gnu.so\n/home/rgommers/Downloads/pyarrow/_dataset_parquet.cpython-311-x86_64-linux-gnu.so\n/home/rgommers/Downloads/pyarrow/_exec_plan.cpython-311-x86_64-linux-gnu.so\n/home/rgommers/Downloads/pyarrow/_feather.cpython-311-x86_64-linux-gnu.so\n/home/rgommers/Downloads/pyarrow/_flight.cpython-311-x86_64-linux-gnu.so\n/home/rgommers/Downloads/pyarrow/_fs.cpython-311-x86_64-linux-gnu.so\n/home/rgommers/Downloads/pyarrow/_gcsfs.cpython-311-x86_64-linux-gnu.so\n/home/rgommers/Downloads/pyarrow/_hdfs.cpython-311-x86_64-linux-gnu.so\n/home/rgommers/Downloads/pyarrow/_hdfsio.cpython-311-x86_64-linux-gnu.so\n/home/rgommers/Downloads/pyarrow/_json.cpython-311-x86_64-linux-gnu.so\n/home/rgommers/Downloads/pyarrow/libarrow_python_flight.so\n/home/rgommers/Downloads/pyarrow/libarrow_python.so\n/home/rgommers/Downloads/pyarrow/lib.cpython-311-x86_64-linux-gnu.so\n/home/rgommers/Downloads/pyarrow/_orc.cpython-311-x86_64-linux-gnu.so\n/home/rgommers/Downloads/pyarrow/_parquet.cpython-311-x86_64-linux-gnu.so\n/home/rgommers/Downloads/pyarrow/_parquet_encryption.cpython-311-x86_64-linux-gnu.so\n/home/rgommers/Downloads/pyarrow/_plasma.cpython-311-x86_64-linux-gnu.so\n/home/rgommers/Downloads/pyarrow/_pyarrow_cpp_tests.cpython-311-x86_64-linux-gnu.so\n/home/rgommers/Downloads/pyarrow/_s3fs.cpython-311-x86_64-linux-gnu.so\n/home/rgommers/Downloads/pyarrow/_substrait.cpython-311-x86_64-linux-gnu.so\n</code></pre> <p>We see that Apache Parquet and Substrait, two separate projects, have to be vendored, and a lot of Apache Arrow C++ components are packed into a single wheel. What can't be seen from the wheel contents is that some of the extension modules were built with other complex dependencies like <code>protobuf</code> and <code>glog</code> (which therefore also need to be built as part of the wheel build process). Such dependencies raise the possibility of symbol conflicts when other packages are built with different versions of those libraries, or in different ways. This can result in hard to debug crashes or \"undefined symbol\" problems. This blog post by Uwe Korn describes some of the issues in detail, including problems installing PyArrow side by side with TensorFlow and Turbodbc.</p> <p>C++ ABI has been an issue for quite a while. Most C++ developers and projects want to use the new ABI, however due to the old manylinux standard and depending on <code>devtoolset</code> forces the use of the old C++ ABI (<code>_GLIBCXX_USE_CXX11_ABI=0</code>). Projects using modern C++14/17 typically want to use the new ABI. This is still quite difficult. It's now possible with <code>manylinux_2_28</code>, but requires building duplicate sets of wheels1 (also <code>manylinux2014</code> for compatibility with older distros like Ubuntu 18.04 and CentOS 8, that will still use the old ABI).</p> <p>As an example: PyTorch added <code>libtorch</code> builds with the new ABI to its own download server in 2019 already (pytorch#17492), however the issue for matching wheels is still open (pytorch#51039) as of Dec '22.</p> <p>An even thornier issue is the proliferation of Abseil in the API of projects like protobuf, given that Abseil's ABI is sensitive (by default) to the C++ standard version being used to compile it, and this needs to be held consistent (essentially) across the entire ecosystem. For more details, see here.</p>"},{"location":"key-issues/native-dependencies/cpp_deps/#problems","title":"Problems","text":"<ul> <li> <p>Requirement for a wheel being completely self-contained, forcing vendoring of   external C++ dependencies. Building external dependencies is a lot of effort,   and error prone.</p> <ul> <li>It also prevents splitting up a wheel into multiple dependent ones. This   may be desirable because of binary size or maintainability.</li> </ul> </li> <li> <p>The old C++ ABI still being the default.</p> </li> <li>Symbol clashes when different libraries vendor the same external dependency.</li> </ul>"},{"location":"key-issues/native-dependencies/cpp_deps/#history","title":"History","text":"<p>Early history TODO.</p> <p>The RAPIDS projects was forced to drop wheels completely from May 2019 to Oct 2022, because the <code>manylinux</code> required a too old C++ version, and made it impossible to create compliant wheels with the RAPIDS C++14 code base. See this blog post for details.</p> <p>Apache Arrow's issues with wheels and the amount of effort they take were laid out in detail in this mailing list post by Wes McKinney.</p> <p>This long discussion on <code>pypa/packaging-problems#25</code> touches on many of the key pain points around wheels and projects with complex C/C++ dependencies (interspersed with some \"packaging politics\").</p>"},{"location":"key-issues/native-dependencies/cpp_deps/#relevant-resources","title":"Relevant resources","text":"<p>TODO</p>"},{"location":"key-issues/native-dependencies/cpp_deps/#potential-solutions-or-mitigations","title":"Potential solutions or mitigations","text":"<ul> <li>Better interaction/integration between PyPI/wheels/pip and other package   managers, where dealing with C++ dependencies is easier.</li> <li>... ?</li> </ul> <ol> <li> <p>See manylinux#1332 and pytorch#51039 for details.\u00a0\u21a9</p> </li> </ol>"},{"location":"key-issues/native-dependencies/geospatial_stack/","title":"The Geospatial stack","text":"<p>Python users have a rich set of packages for geospatial data I/O, manipulation, analytics and visualization available to them. Those include xarray, Shapely, Geopandas, Rasterio, Fiona, GDAL, pyproj, PySAL, Folium, Geoviews, and descartes. Users typically use multiple of these packages together. It has always been difficult to set up a working Python environment for that. Especially when installing from PyPI.</p>"},{"location":"key-issues/native-dependencies/geospatial_stack/#current-state","title":"Current state","text":"<p>The foundation for all of the Python geospatial packages are a set of native libraries, in particular GDAL (C/C++), PROJ (C++), libspatialindex (C++), and libtiff (C).</p> <p>These libraries are difficult to build, GDAL in particular (it has a long list of other native dependencies, some mandatory and some optional). When there are multiple fundamental C/C++-only libraries and multiple consumers of those libraries, there is a problem. The PyPI/wheels design requires that each Python package rebuilds all those C libraries and vendors them. This is (a) a hard job for any individual package author, (b) requires coordination in order not to end up with different versions of vendored libraries, and (c) a big enough hurdle in practice that Python package authors have not been able to solve the problems.</p> <p>To illustrate that, this is the warning displayed in the Geopandas documentations (v0.12.2 install page) for installing with <code>pip</code>:</p> <p>Warning</p> <p>When using pip to install GeoPandas, you need to make sure that all dependencies are installed correctly.</p> <ul> <li><code>fiona</code> provides binary wheels with the   dependencies included for Mac and Linux, but not for Windows.   Alternatively, you can install <code>pyogrio</code>   which does have wheels for Windows.</li> <li><code>pyproj</code>,   <code>rtree</code>, and   <code>shapely</code>   provide binary wheels with dependencies included for Mac, Linux, and   Windows.</li> </ul> <p>Depending on your platform, you might need to compile and install their C dependencies manually. We refer to the individual packages for more details on installing those. Using conda (see above) avoids the need to compile the dependencies yourself.</p> <p>The description tells a clear story: there are four dependencies with native code, and those then have other native dependencies that may not be included. Why weren't those dependencies all vendored? Likely because it was simply too hard - building for example GDAL correctly is notoriously difficult. Also, while GDAL is a large C/C++ library, it has a Python API and is present on PyPI but does not provide wheels (its PyPI project description recommends using conda). That brings up a question - should other packages express a dependency on GDAL, knowing it probably won't build, or try to vendor it in their own wheels?1</p> <p>We can use conda-forge to look at the full dependency tree for Geopandas, which shows how many native dependencies this one pure Python package has:</p> Geopandas dependency tree <p>This is the dependency tree when installing only <code>geopandas</code> from conda-forge (duplicate entries removed from tree):</p> <pre><code>$ mamba create -n geo-env geopandas\n$ mamba activate geo-env\n$ mamba repoquery depends geopandas --tree\n\ngeopandas[0.12.2]\n  \u251c\u2500 fiona[1.8.22]\n  \u2502  \u251c\u2500 attrs[22.1.0]\n  \u2502  \u2502  \u2514\u2500 python[3.11.0]\n  \u2502  \u2502     \u251c\u2500 bzip2[1.0.8]\n  \u2502  \u2502     \u2502  \u2514\u2500 libgcc-ng[12.2.0]\n  \u2502  \u2502     \u2502     \u251c\u2500 _libgcc_mutex[0.1]\n  \u2502  \u2502     \u2502     \u2514\u2500 _openmp_mutex[4.5]\n  \u2502  \u2502     \u2502        \u2514\u2500 libgomp[12.2.0]\n  \u2502  \u2502     \u251c\u2500 ld_impl_linux-64[2.39]\n  \u2502  \u2502     \u251c\u2500 libffi[3.4.2]\n  \u2502  \u2502     \u251c\u2500 libnsl[2.0.0]\n  \u2502  \u2502     \u251c\u2500 libsqlite[3.40.0]\n  \u2502  \u2502     \u2502  \u2514\u2500 libzlib[1.2.13]\n  \u2502  \u2502     \u251c\u2500 libuuid[2.32.1]\n  \u2502  \u2502     \u251c\u2500 ncurses[6.3]\n  \u2502  \u2502     \u251c\u2500 openssl[3.0.7]\n  \u2502  \u2502     \u2502  \u251c\u2500 ca-certificates[2022.12.7]\n  \u2502  \u2502     \u251c\u2500 readline[8.1.2]\n  \u2502  \u2502     \u251c\u2500 tk[8.6.12]\n  \u2502  \u2502     \u251c\u2500 tzdata[2022g]\n  \u2502  \u2502     \u251c\u2500 xz[5.2.6]\n  \u2502  \u2502     \u2514\u2500 pip[22.3.1]\n  \u2502  \u2502        \u251c\u2500 setuptools[65.5.1]\n  \u2502  \u2502        \u251c\u2500 wheel[0.38.4]\n  \u2502  \u251c\u2500 click[8.1.3]\n  \u2502  \u251c\u2500 click-plugins[1.1.1]\n  \u2502  \u251c\u2500 cligj[0.7.2]\n  \u2502  \u251c\u2500 gdal[3.6.1]\n  \u2502  \u2502  \u251c\u2500 hdf5[1.12.2]\n  \u2502  \u2502  \u2502  \u251c\u2500 libcurl[7.86.0]\n  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 krb5[1.20.1]\n  \u2502  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 keyutils[1.6.1]\n  \u2502  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 libedit[3.1.20191231]\n  \u2502  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 libstdcxx-ng[12.2.0]\n  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 libnghttp2[1.47.0]\n  \u2502  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 c-ares[1.18.1]\n  \u2502  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 libev[4.33]\n  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 libssh2[1.10.0]\n  \u2502  \u2502  \u2502  \u251c\u2500 libgfortran-ng[12.2.0]\n  \u2502  \u2502  \u2502  \u2502  \u2514\u2500 libgfortran5[12.2.0]\n  \u2502  \u2502  \u251c\u2500 libgdal[3.6.1]\n  \u2502  \u2502  \u2502  \u251c\u2500 blosc[1.21.3]\n  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 lz4-c[1.9.3]\n  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 snappy[1.1.9]\n  \u2502  \u2502  \u2502  \u2502  \u2514\u2500 zstd[1.5.2]\n  \u2502  \u2502  \u2502  \u251c\u2500 cfitsio[4.2.0]\n  \u2502  \u2502  \u2502  \u251c\u2500 expat[2.5.0]\n  \u2502  \u2502  \u2502  \u251c\u2500 freexl[1.0.6]\n  \u2502  \u2502  \u2502  \u251c\u2500 geos[3.11.1]\n  \u2502  \u2502  \u2502  \u251c\u2500 geotiff[1.7.1]\n  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 jpeg[9e]\n  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 libtiff[4.4.0]\n  \u2502  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 lerc[4.0.0]\n  \u2502  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 libdeflate[1.14]\n  \u2502  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 libwebp-base[1.2.4]\n  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 proj[9.1.0]\n  \u2502  \u2502  \u2502  \u2502  \u2502  \u2514\u2500 sqlite[3.40.0]\n  \u2502  \u2502  \u2502  \u2502  \u2514\u2500 zlib[1.2.13]\n  \u2502  \u2502  \u2502  \u251c\u2500 giflib[5.2.1]\n  \u2502  \u2502  \u2502  \u251c\u2500 hdf4[4.2.15]\n  \u2502  \u2502  \u2502  \u251c\u2500 icu[70.1]\n  \u2502  \u2502  \u2502  \u251c\u2500 json-c[0.16]\n  \u2502  \u2502  \u2502  \u251c\u2500 kealib[1.5.0]\n  \u2502  \u2502  \u2502  \u251c\u2500 libiconv[1.17]\n  \u2502  \u2502  \u2502  \u251c\u2500 libkml[1.3.0]\n  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 boost-cpp[1.78.0]\n  \u2502  \u2502  \u2502  \u251c\u2500 libnetcdf[4.8.1]\n  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 curl[7.86.0]\n  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 libxml2[2.10.3]\n  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 libzip[1.9.2]\n  \u2502  \u2502  \u2502  \u251c\u2500 libpng[1.6.39]\n  \u2502  \u2502  \u2502  \u251c\u2500 libpq[15.1]\n  \u2502  \u2502  \u2502  \u251c\u2500 libspatialite[5.0.1]\n  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 librttopo[1.1.0]\n  \u2502  \u2502  \u2502  \u251c\u2500 openjpeg[2.5.0]\n  \u2502  \u2502  \u2502  \u251c\u2500 pcre2[10.40]\n  \u2502  \u2502  \u2502  \u251c\u2500 poppler[22.12.0]\n  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 cairo[1.16.0]\n  \u2502  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 fontconfig[2.14.1]\n  \u2502  \u2502  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 freetype[2.12.1]\n  \u2502  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 fonts-conda-ecosystem[1]\n  \u2502  \u2502  \u2502  \u2502  \u2502  \u2502  \u2514\u2500 fonts-conda-forge[1]\n  \u2502  \u2502  \u2502  \u2502  \u2502  \u2502     \u251c\u2500 font-ttf-dejavu-sans-mono[2.37]\n  \u2502  \u2502  \u2502  \u2502  \u2502  \u2502     \u251c\u2500 font-ttf-inconsolata[3.000]\n  \u2502  \u2502  \u2502  \u2502  \u2502  \u2502     \u251c\u2500 font-ttf-source-code-pro[2.038]\n  \u2502  \u2502  \u2502  \u2502  \u2502  \u2502     \u2514\u2500 font-ttf-ubuntu[0.83]\n  \u2502  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 libglib[2.74.1]\n  \u2502  \u2502  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 gettext[0.21.1]\n  \u2502  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 libxcb[1.13]\n  \u2502  \u2502  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 pthread-stubs[0.4]\n  \u2502  \u2502  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 xorg-libxau[1.0.9]\n  \u2502  \u2502  \u2502  \u2502  \u2502  \u2502  \u2514\u2500 xorg-libxdmcp[1.1.3]\n  \u2502  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 pixman[0.40.0]\n  \u2502  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 xorg-libice[1.0.10]\n  \u2502  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 xorg-libsm[1.2.3]\n  \u2502  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 xorg-libx11[1.7.2]\n  \u2502  \u2502  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 xorg-kbproto[1.0.7]\n  \u2502  \u2502  \u2502  \u2502  \u2502  \u2502  \u2514\u2500 xorg-xproto[7.0.31]\n  \u2502  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 xorg-libxext[1.3.4]\n  \u2502  \u2502  \u2502  \u2502  \u2502  \u2502  \u2514\u2500 xorg-xextproto[7.3.0]\n  \u2502  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 xorg-libxrender[0.9.10]\n  \u2502  \u2502  \u2502  \u2502  \u2502  \u2502  \u2514\u2500 xorg-renderproto[0.11.1]\n  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 lcms2[2.14]\n  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 nss[3.82]\n  \u2502  \u2502  \u2502  \u2502  \u2502  \u2514\u2500 nspr[4.35]\n  \u2502  \u2502  \u2502  \u2502  \u2514\u2500 poppler-data[0.4.11]\n  \u2502  \u2502  \u2502  \u251c\u2500 postgresql[15.1]\n  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 tzcode[2022g]\n  \u2502  \u2502  \u2502  \u251c\u2500 qhull[2020.2]\n  \u2502  \u2502  \u2502  \u251c\u2500 tiledb[2.13.0]\n  \u2502  \u2502  \u2502  \u251c\u2500 xerces-c[3.2.4]\n  \u2502  \u2502  \u251c\u2500 numpy[1.23.5]\n  \u2502  \u2502  \u2502  \u251c\u2500 libblas[3.9.0]\n  \u2502  \u2502  \u2502  \u2502  \u2514\u2500 libopenblas[0.3.21]\n  \u2502  \u2502  \u2502  \u251c\u2500 libcblas[3.9.0]\n  \u2502  \u2502  \u2502  \u251c\u2500 liblapack[3.9.0]\n  \u2502  \u2502  \u2502  \u2514\u2500 python_abi[3.11]\n  \u2502  \u251c\u2500 munch[2.5.0]\n  \u2502  \u2502  \u2514\u2500 six[1.16.0]\n  \u2502  \u251c\u2500 shapely[2.0.0]\n  \u251c\u2500 folium[0.14.0]\n  \u2502  \u251c\u2500 branca[0.6.0]\n  \u2502  \u2502  \u251c\u2500 jinja2[3.1.2]\n  \u2502  \u2502  \u2502  \u251c\u2500 markupsafe[2.1.1]\n  \u2502  \u2514\u2500 requests[2.28.1]\n  \u2502     \u251c\u2500 certifi[2022.12.7]\n  \u2502     \u251c\u2500 charset-normalizer[2.1.1]\n  \u2502     \u251c\u2500 idna[3.4]\n  \u2502     \u2514\u2500 urllib3[1.26.13]\n  \u2502        \u251c\u2500 brotlipy[0.7.0]\n  \u2502        \u2502  \u251c\u2500 cffi[1.15.1]\n  \u2502        \u2502  \u2502  \u251c\u2500 pycparser[2.21]\n  \u2502        \u251c\u2500 cryptography[38.0.4]\n  \u2502        \u251c\u2500 pyopenssl[22.1.0]\n  \u2502        \u251c\u2500 pysocks[1.7.1]\n  \u251c\u2500 geopandas-base[0.12.2]\n  \u2502  \u251c\u2500 packaging[22.0]\n  \u2502  \u251c\u2500 pandas[1.5.2]\n  \u2502  \u2502  \u251c\u2500 python-dateutil[2.8.2]\n  \u2502  \u2502  \u2514\u2500 pytz[2022.6]\n  \u2502  \u251c\u2500 pyproj[3.4.1]\n  \u251c\u2500 mapclassify[2.4.3]\n  \u2502  \u251c\u2500 networkx[2.8.8]\n  \u2502  \u251c\u2500 scikit-learn[1.2.0]\n  \u2502  \u2502  \u251c\u2500 joblib[1.2.0]\n  \u2502  \u2502  \u251c\u2500 scipy[1.9.3]\n  \u2502  \u2502  \u2514\u2500 threadpoolctl[3.1.0]\n  \u251c\u2500 matplotlib-base[3.6.2]\n  \u2502  \u251c\u2500 contourpy[1.0.6]\n  \u2502  \u251c\u2500 cycler[0.11.0]\n  \u2502  \u251c\u2500 fonttools[4.38.0]\n  \u2502  \u2502  \u251c\u2500 brotli[1.0.9]\n  \u2502  \u2502  \u2502  \u251c\u2500 brotli-bin[1.0.9]\n  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 libbrotlidec[1.0.9]\n  \u2502  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 libbrotlicommon[1.0.9]\n  \u2502  \u2502  \u2502  \u2502  \u251c\u2500 libbrotlienc[1.0.9]\n  \u2502  \u2502  \u251c\u2500 munkres[1.1.4]\n  \u2502  \u251c\u2500 kiwisolver[1.4.4]\n  \u2502  \u251c\u2500 pillow[9.2.0]\n  \u2502  \u251c\u2500 pyparsing[3.0.9]\n  \u251c\u2500 rtree[1.0.1]\n  \u2502  \u251c\u2500 libspatialindex[1.9.3]\n  \u2514\u2500 xyzservices[2022.9.0]\n</code></pre> <p>Building all those libraries in a consistent fashion as a set of wheels is effectively infeasible, due to some of the \"meta topics\" around packaging on PyPI (the author-led social model, lack of a build farm). And that's just the tip of the iceberg. Geopandas is positioned relatively low in the stack: libraries.io tells us that it has ~660 dependent packages on PyPI, quite a few of which are quite popular themselves.</p>"},{"location":"key-issues/native-dependencies/geospatial_stack/#problems","title":"Problems","text":"<ul> <li>The whole geospatial stack is effectively not usable from PyPI, and most   projects and domain-specific user guides recommend using Conda.</li> <li>Multiple native libraries as a foundation requires coordination and shared   build infrastructure.</li> <li>As a specific domain, geospatial projects have less energy/people available   to solve problems compared to the largest projects in the PyData space.</li> </ul>"},{"location":"key-issues/native-dependencies/geospatial_stack/#history","title":"History","text":"<p>TODO</p>"},{"location":"key-issues/native-dependencies/geospatial_stack/#relevant-resources","title":"Relevant resources","text":"<p>TODO</p>"},{"location":"key-issues/native-dependencies/geospatial_stack/#potential-solutions-or-mitigations","title":"Potential solutions or mitigations","text":"<p>The current state - the geospatial stack being almost uninstallable from PyPI, and projects and users mostly using conda-forge - is hard to improve upon unless some of the meta issues with PyPI that are the root causes of that current state get addressed.</p> <p>The most effective direction forward is probably to acknowledge that this use case is too difficult for PyPI, and to improve the interoperability between PyPI/Pip and system package managers.</p> <ol> <li> <p>GDAL seems to be using the \"flow of source code to distributors\" function of PyPI here (see \"purposes of PyPI\"). Unofficial wheels used to be provided by Christoph Gohlke on his website.\u00a0\u21a9</p> </li> </ol>"},{"location":"meta-topics/build_steps_conceptual/","title":"Build &amp; package management concepts and terminology","text":"<p>Having a clear picture of how build systems, package and environment managers interact and using terminology that is well-defined is important when discussing any concrete issue around using native code/dependencies. This section attempts to provide such a picture.</p> <p>We'll start with build &amp; packaging concepts and design; if terminology is unclear, please refer to the terminology section further down.</p>"},{"location":"meta-topics/build_steps_conceptual/#packagedependency-management-build-systems","title":"Package/dependency management &amp; build systems","text":"<p>When using a dependency in a package at build time, we need it installed first. Installing and using are well separated: the former is done by the package manager, the latter by the build system.</p> <p>Package managers need metadata - typically as a separate metadata file in a specific format, including applicable version constraints - to be able to manage dependencies. This is done in similar ways across package managers. As an example, this is what that looks like for a package depending on <code>pybind11</code> version 2.4.3 or later:</p> PyPI/pipCondaSpackHomebrewNix <p>For PyPI we have a <code>pyproject.toml</code> file: <pre><code>[build-system]\nrequires = [\"pybind11&gt;=2.4.3\"]\n</code></pre></p> <p>For Conda we have a <code>meta.yaml</code> file: <pre><code>requirements:\nbuild:\n- pybind11 &gt;=2.4.3\n</code></pre></p> <p>For Spack we have a <code>package.py</code> file: <pre><code>from spack.package import *\n\nclass PyMypkg(PythonPackage):\n    depends_on(\"py-pybind11@2.4.3:\", when=\"@1.9.1:\", type=(\"build\", \"link\"))\n</code></pre></p> <p>For Homebrew we have a <code>pkgname.rb</code> file: <pre><code>class Pkgname &lt; Formula\ndepends_on \"pybind11\"\n</code></pre> Note: no <code>&gt;=2.4.3</code> version constraint, because Homebrew provides only a single version per package.</p> <p>For Nix we have a <code>default.nix</code> file: <pre><code>{ lib\n, pybind11\n}:\n\nbuildPythonPackage rec {\n  buildInputs = [pybind11];\n</code></pre> Note: no <code>&gt;=2.4.3</code> version constraint, because Nix provides only a single version per package.</p> <p>At build time, the package manager is used to ensure that a dependency is installed before the build system is invoked. Inside the config files for the build system, the dependency can then be used:</p> setuptoolsMesonCMake <p>For setuptools we use a <code>setup.py</code> file with: <pre><code>import pybind11\n\nincdir_pybind11 = pybind11.get_include()\next_modules = [\n    Extension('_uses_pybind',\n        ['src/main.cpp'],\n        include_dirs=[incdir_pybind11],\n    )\n]\n</code></pre></p> <p>For Meson we use a <code>meson.build</code> file with: <pre><code>incdir_pybind11 = run_command(py,\n['-c', 'import pybind11; print(pybind11.get_include())'],\ncheck: true,\n).stdout().strip()\ninc_pybind11 = include_directories(incdir_pybind11)\n\npy.extension_module('_uses_pybind',\n['src/main.cpp'],\ninclude_directories: [inc_pybind11],\n)\n</code></pre></p> <p>Note: the above should be replaced by this once <code>pybind11</code> support is built-in: <pre><code>dep_pybind11 = dependency('pybind11')\npy.extension_module('_uses_pybind',\n['src/main.cpp'],\ndependencies: [dep_pybind11]\n)\n</code></pre></p> <p>For CMake used through scikit-build we use a <code>CMakeLists.txt</code> file with: <pre><code>find_package(pybind11 CONFIG REQUIRED)\n\npybind11_add_module(_core MODULE src/main.cpp)\n</code></pre></p> <p>Important</p> <p>There are quite a few build systems and even more different package managers. These can be mixed and matched1 2 - each build system can be used in any package manager.</p>"},{"location":"meta-topics/build_steps_conceptual/#types-of-package-managers","title":"Types of package managers","text":"<p>The word \"package manager\" is applied to a wide variety of tools. It is helpful to distinguish two different types of package managers.</p> <p>(A) System package managers:</p> <ul> <li>Single version of each package (so may not need a solver for dependency resolution)</li> <li>All libraries needed for a functioning system (sometimes modulo <code>libc</code>)</li> <li>Multi-language</li> <li>Single-platform (often, not always)</li> <li>Examples: Linux package managers (APT, RPM, Pacman, YUM, etc.), Homebrew,   Nix, Guix</li> </ul> <p>(B) Dependency package managers:</p> <ul> <li>Multiple versions of each package at the same time (key ingredient: dependency resolution)</li> <li>Single language (often, not always)</li> <li>Multi-platform</li> <li>Examples: Pip, Poetry, NPM, Cargo, Conan, vcpkg, Pkg (Julia), RubyGems, NuGet</li> </ul> <p>Additionally we have (C) Environment managers:</p> <ul> <li>Allow using different sets of packages - possibly including compilers,   language runtime, and package manager.</li> <li>Examples: venv, virtualenv, pyenv, nvm, RVM, nix-shell</li> </ul> <p>Important</p> <p>A key point to understand is that dependency package managers rely on a system package manager to provide packages that are not present in the dependency package manager's repository. See native dependencies.</p> <p>This classification isn't perfect. Some tools given as above touch more or less of another category they're in. Or they span multiple of the three categories and some don't quite fit. A few of the most prominent examples:</p> <ul> <li>Conda spans all three categories: it relies on <code>libc</code> from the OS, but   includes all other \"system\" packages, supports multiple versions for all   packages, and supports environments.</li> <li>Spack is quite similar to Conda, at least in this classification. The main   differences are that (a) it defaults to building from source on the user   system (with a binary cache system), and (b) it treats compilers differently;   they can come from the system, but Spack does know about them and allows   using multiple compilers in a controlled fashion.</li> <li>Chocolatey provides some system-like packages like compilers (Clang, Mingw),   Microsoft Visual C++ Redistributable's and Python interpreters - but its   packages are mostly self-contained and it only handles a few dependencies   in a minimal fashion.</li> </ul> What about PDM, Hatch, Pipenv, Nox, Tox &amp; co.? <p>These are all more developer tools - they provide a UX for environment and dependency management, but rely on Pip, venv/virtualenv for dependency resolution and environment creation and (de)activation. Alternatively, one could say that they are dependency plus environment managers. The characteristics of their behavior will still be determined by the tools they wrap though, so for the purposes of discussing Python packaging design as it relates to dealing with native code it's not too useful to consider them separately.</p>"},{"location":"meta-topics/build_steps_conceptual/#building-and-installing-or-uploading-artifacts","title":"Building and installing or uploading artifacts","text":"<p>Now that we have all the needed concepts for \"building a package\", let's look at how that works at a conceptual level. An artifact is an output of building a package - this can be an sdist, a wheel, or a binary in a different format. When a build gets triggered, either by a user or by an application or automated system, these are the phases of the process that follows:</p> <p> </p>  Steps taken by a build or install tool to produce a build artifact for a Python package and install or upload it.  <p>Those phases are more or less the same, independent of which package manager is used or whether we're building for the local system or for redistribution.</p> <p>Note that the build frontend and build backend may be involved in one or more places. Their role is to trigger the package manager and build system, and handle the metadata of the package appropriately and communicate it to the package manager and build system.</p> <p>The details of every step above may be different. Here this is worked out for three concrete cases: (a) installing an sdist from PyPI, (b) building a wheel for redistribution on PyPI, and (c) building a conda package for redistribution on conda-forge:</p> <p></p>  Examples of concrete steps taken for three scenarios: installing an sdist from PyPI, building a wheel to distribute on PyPI, and building a conda package to distribute on conda-forge."},{"location":"meta-topics/build_steps_conceptual/#terminology","title":"Terminology","text":"<p>Build system - the tool responsible for \"building\" a package. Note that there can be multiple interpretations of what that actually means. Here we take the operational definition that it is the tool for which you write your build configuration files. So:</p> <ul> <li><code>setup.py</code> -&gt; setuptools</li> <li><code>CMakelists.txt</code> -&gt; CMake</li> <li><code>meson.build</code> -&gt; Meson</li> <li><code>Makefile</code> -&gt; make</li> <li><code>SConstruct</code> -&gt; SCons</li> </ul> <p>This definition is probably the most commonly used one across technologies and language ecosystems, and can be applied irrespective of whether or not a package contains native code3 , or whether or not the build system invokes a compiler directly or via a backend (e.g. CMake and Meson may use Ninja for that).</p> <p>Build frontend - the tool that is invoked by a user or by another tool to build a wheel or sdist (e.g., pip or pypa/build). See PEP 517 for a more detailed description.</p> <p>Build backend - the tool that is invoked, via the <code>build-backend</code> hook in <code>pyproject.toml</code>, by a build frontend and is responsible for returning a wheel or sdist to that frontend (e.g., setuptools, Flit, meson-python, scikit-build-core or hatch). The build backend may be part of a build system, or it may be a fairly thin layer in between the build frontend and the actual build system. </p> <p>Installer - a tool that accepts a set of package requirements, and installs these packages on the user's system. Note that \"installer\" is named \"integration frontend\" in PEP 517. The latter term does not seem to be commonly used.</p>"},{"location":"meta-topics/build_steps_conceptual/#problems","title":"Problems","text":"<p>One problem here is social. The Python packaging community tends to think in terms of PyPI, wheels and sdists almost exclusively. With a lot of focus on build frontends and build backends. For the process of building a binary, a wheel is not that different from an RPM, Debian or Conda package. Those often go through a wheel as an intermediate step, and use tools like <code>pip</code>. Packaging terminology and tool design should make room for this - wheels are not that special, they're a zip file containing a built package plus its metadata. The most important thing about wheels are the specifications around how the binaries inside them should be built and on what systems they are expected to work. In terms of the build process itself, what the build system does is by far the most time-consuming and complex part of producing a binary. A build frontend only has set up a clean build environment4 and to invoke a backend, passing along CLI options if given. A build backend is a thin layer, whose main purpose is to invoke the build system, and then add the relevant metadata to the final wheel.</p> <p>There are lots of practical issues not discussed on this page (e.g., wheel tags are poorly documented and are a constant source of bugs and maintenance effort), however those can be dealt with one by one. That is outside the scope of this \"meta topic\".</p>"},{"location":"meta-topics/build_steps_conceptual/#history","title":"History","text":"<p>TODO</p>"},{"location":"meta-topics/build_steps_conceptual/#relevant-resources","title":"Relevant resources","text":"<p>TODO</p>"},{"location":"meta-topics/build_steps_conceptual/#potential-solutions-or-mitigations","title":"Potential solutions or mitigations","text":"<ul> <li>Better documentation and more education around how build &amp; packaging works.</li> <li>... ?</li> </ul> <ol> <li> <p>All-in-one systems like Bazel, Buck and Pants are the exception. Those are primarily used inside large companies where a single way of working is enforced, either through a monorepo or other tooling and ways of working. The build system parts of such systems can still be integrated with other package managers (e.g., TensorFlow is built with Bazel and distributed as wheels and conda packages) - but that is typically challenging. We won't consider that further here.\u00a0\u21a9</p> </li> <li> <p>This is not true for the packages/libraries themselves though, which in the vast majority of cases have only a single build system. Exceptions include: TODO SCIPY PYTORCH\u00a0\u21a9</p> </li> <li> <p>Note that in very simple pure Python cases, the \"build configuration\" may be no more than static metadata that is all contained in <code>[tool.build-system-name]</code> table in <code>pyproject.toml</code>.\u00a0\u21a9</p> </li> <li> <p>Often a build frontend does not have to set up a build environment. By default <code>pip</code> and <code>pypa/build</code> do set one up, but disabling build isolation with <code>--no-build-isolation</code> or <code>--no-isolation</code> is quite important, both for local development and for building artifacts other than wheels for redistribution. Whether or not to default to build isolation was a long debate, and there are pros and cons either way.\u00a0\u21a9</p> </li> </ol>"},{"location":"meta-topics/no_build_farm/","title":"Lack of a build farm for PyPI","text":"<p>There is no centralized service (or \"build farm\") for building wheels for packages on PyPI. This is not for lack of agreement on whether that is desirable or not (it's the top item on the PSF's fundable packaging improvements), but because it's a huge amount of work to create and maintain such a service.</p> <p>Benefits of a build farm include:</p> <ul> <li>Easier to build wheels, which means less effort for package authors and a   higher percentage of packages having wheels available,</li> <li>Ability to use a consistent build environment, leading to higher quality   wheels and fewer issues with binary compatibility between different packages   (see, e.g., managing ABI compatibility and   complex C++ dependencies),</li> <li>Ability to roll out upgrades to compiler toolchains or rebuilds of many   packages at once (e.g., for a new Python version),</li> <li>Detecting of some classes of issues with releases at upload-to-PyPI time   rather than when users open bug reports (e.g., ensure all <code>.py</code> files in a   package can actually be imported),</li> <li>Opportunity to grow a packaging community, with collective expertise,   resources and policies.</li> </ul> <p>Two package repositories that are fairly similar to PyPI, CPAN for Perl and CRAN for R, both don't allow hosting packages on the repository unless the package passes a series of tests. This includes tests that attempt to build the library in an isolated environment to ensure that all dependencies are correctly listed, and running unit tests. From anecdotal evidence, the average quality of those packages is higher, and it's easier to redistribute them in other packaging systems. Pretty much all system package managers as well as Conda and Spack follow similar designs - at least a build should pass and the package should be importable.</p>"},{"location":"meta-topics/no_build_farm/#current-state","title":"Current state","text":"<p>This topic has been discussed on and off, however there is no concrete effort happening in this direction as of Dec 2022.</p> <p>One early attempt at a solution was conda-press, which aimed to repackage conda packages into wheels, has not been updated since 2019. There were some unresolved design questions or issues with it, and it is unclear if the approach would result in problem-free wheels for the more complex packages.</p> <p>Even if <code>conda-press</code> isn't going anywhere, the conda-forge infrastructure is perhaps the most suitable infrastructure to use as a base to create a new build farm from. It would still be a lot of work to adapt it to PyPI - but far less than starting from scratch.</p> <p>A build farm needs maintainers and its own community around it. That community doesn't exist, and bootstrapping it isn't easy. However, there are places where maintainers have coalesced around common tooling. <code>cibuildwheel</code> is probably the most central point. Now that <code>multibuild</code> is abandoned, <code>cibuildwheel</code> is being used to build wheels on CI systems that are free for open source projects to use by many of the most popular projects with native code.</p> <p>The cost of a build farm</p> <p>Build farms come with substantial-to-massive costs in terms of build &amp; hosting infrastructure, automation that needs to be maintained, and generally human attention/intervention for cases that go wrong.</p> <p>These costs already appear for the above-mentioned \"build and verify\" model used for CRAN. However, when wishing to follow the widely-used practice among distributions to rely predominantly on shared libraries, this brings a massive further increase in necessary automation and maintenance (though the benefits are such that this is the norm rather than the exception).</p> <p>In particular, doing so needs careful tracking which packages are exposed to any given (shared) library's ABI, the ABI stability of that library as expressed through its version scheme, rebuilding all dependent packages once an ABI-changing library version is released, and finally representing all that accurately enough in metadata so that the resolver will only choose compatible package combinations for a given environment.</p> <p>Due to the limitation of only having a single shared library on the path searched by the linker for symbols at runtime (see here for more details), this kind of ecosystem-wide rebuild needs to be done relatively quickly. This is because any given package that has a release in the meantime can only be compiled for either the old or for the new ABI (with very few exceptions for transitions that are more onerous, otherwise one quickly suffers a combinatorial explosion of required build variants), and not moving the ecosystem as a whole to the new baseline essentially means a bifurcation which packages can be co-installed with each other.</p> <p>For an impression of the amount of effort required for the maintenance of such an undertaking, see for example the permanently ongoing so-called \"migrations\" in conda-forge, e.g. here and here. While a lot of rebuilds can be automated (requiring infrastructure that is maintained and operated), the initial integration of a library needs to be done manually, and a persistent percentage of packages (say ~1-10%) will fail any given migration for various reasons, requiring further intervention of a dedicated group of build farm maintainers (occasionally requiring backporting or even authoring patches against the library sources). This is not unique to conda-forge, but a reality for distributions that follow this model, from Debian, Fedora and Ubuntu to Gentoo, vcpkg etc.</p>"},{"location":"meta-topics/no_build_farm/#problems","title":"Problems","text":"<p>A build farm has many advantages, listed above. Not having a build farm means not having those advantages.</p>"},{"location":"meta-topics/no_build_farm/#history","title":"History","text":"<p>TODO</p>"},{"location":"meta-topics/no_build_farm/#relevant-resources","title":"Relevant resources","text":"<p>TODO</p>"},{"location":"meta-topics/no_build_farm/#potential-solutions-or-mitigations","title":"Potential solutions or mitigations","text":"<p>\"Build a build farm\" is easy to write down here, but it's a huge effort and it is unclear how to plan and fund such an effort.</p>"},{"location":"meta-topics/purposes_of_pypi/","title":"The multiple purposes of PyPI","text":""},{"location":"meta-topics/purposes_of_pypi/#current-state","title":"Current state","text":"<p>PyPI serves more than one purpose. In its own words, from the pypi.org front page, it is a repository of software for the Python programming language that</p> <ol> <li>\"package authors use to distribute their software\"</li> <li>\"helps you find and install software developed and shared by the Python community\"</li> </ol> <p>For (2), we can further distinguish:</p> <ul> <li>installing packages from binaries (wheels) for a select set of supported platforms</li> <li>installing packages from a source distribution (sdist) on any platform</li> </ul>"},{"location":"meta-topics/purposes_of_pypi/#package-authors-distributing-their-software","title":"Package authors distributing their software","text":"<p>Publishing versions of Python package as source code on PyPI is the original purpose of PyPI. It is the way authors \"announce\" that there is a new version - if it's not on PyPI, then effectively it does not exist as a reusable, public Python package. It is the authoritative flow of source code flow from authors to end users, downstream dependents, and (importantly) to all redistributors of the package. That last category includes:</p> <ul> <li>operating system providers: Linux distros, Apple for macOS, Microsoft for Windows, ...</li> <li>standalone packaging systems: Conda, Spack, Nix, Homebrew, ...</li> <li>sysadmins for deployments inside companies, universities, HPC centers, ...</li> <li>developers of Python distributions:   Anaconda Distribution,   ActiveState Python,   WinPython,   RStudio, ...</li> <li>maintainers of other wheel indexes:   piwheels (for Raspberry Pi),   Christoph Gohkle's Windows wheels (discontinued June '22),   Alpine Wheels, ...</li> <li>developers of standalone apps and embedded systems containing Python packages,</li> <li>and probably quite a few more types of consumers,</li> </ul>"},{"location":"meta-topics/purposes_of_pypi/#users-installing-python-packages-from-binaries","title":"Users installing Python packages from binaries","text":"<p>Installing from binaries typically means \"install wheels with <code>pip</code>\"1. Today, wheels are responsible of the vast majority of package installs from PyPI, and they are a very convenient way for most Python developers to quickly install up-to-date versions of the packages they need in their development environment.</p> <p>The number of types of wheels which PyPI allows uploading is growing. It is a (sparse) matrix of:</p> <ul> <li>Python interpreter2: CPython, PyPy</li> <li>Operating system: Windows, macOS, Linux</li> <li>CPU architecture: i686, x86-64, aarch64/arm64, ppc64le, s390x</li> <li><code>libc</code> flavor: glibc, musl libc</li> </ul> <p>A good overview is maintained inthe cibuildwheel docs.</p> <p>When installing a wheel, its declared runtime dependencies will also be installed. Those dependencies are found in the metadata inside the wheel. <code>pip</code>'s dependency resolver  takes care of this process. Dependency resolution and management is an oft-debated and nontrivial topic in general. Challenges in this area are not specific to packages with native code; once we have wheels, they should behave similarly to pure Python wheels: dependencies are only on other packages on PyPI, everything else should be present within the wheel itself.</p>"},{"location":"meta-topics/purposes_of_pypi/#users-installing-python-packages-from-sdists","title":"Users installing Python packages from sdists","text":"<p>Installing a package from an sdist typically implies using <code>pip</code>. <code>pip</code> downloads the sdist, builds a wheel from it (using a <code>pyproject.toml</code> build backend hook, or invoking <code>setuptools</code> if such a hook is not present), and then installs it. Installing runtime dependencies then works the same way as described in the section above.</p> <p>The key issue here is dependencies that are needed at build time. It is currently not possible to describe build dependencies other than those that can be found on PyPI. And every package containing native code has such dependencies. In some cases it's only a C compiler - which is usually present on (non-Windows) end user machines. Once one needs other compilers, shared libraries from the system, or other non-PyPI dependencies, things become fragile very quickly. This topic is discussed in Metadata handling on PyPI.</p>"},{"location":"meta-topics/purposes_of_pypi/#problems","title":"Problems","text":"<p>The different purposes of PyPI not being separated well enough results in an important problem for package authors. Due to these two \"mix-ups of purposes\":</p> <ol> <li>Uploading an sdist makes it available to redistributors (purpose 1) and    causes it to be available for users to install from source.</li> <li><code>pip</code> prefers installing from a wheel, but automatically tries to install    from sdist if a wheel cannot be found for the most recent version on PyPI.</li> </ol> <p>authors of packages that are hard to build from source have a difficult choice to make. If they do upload an sdist, they may get a flood of bug reports from users with failed builds. If they don't upload an sdist but only wheels, they (a) disrupt the flow of source code to redistributors, (b) diminish the value of PyPI as the authoritative archive of Python packages, and (c) are doing something that makes it harder to apply security best practices (ideally binaries for open source projects always come with source code and can be recreated from them).</p> <p>We'll also remark here that wheels have to be built from source under a very specific set of conditions (e.g., in a manylinux Docker container), which are typically not met on end user systems. Locally built wheels may end up in <code>pip</code>'s cache, which is then \"polluted\" with a wheel that may not work well. There are only a few packaging systems that mix building from source with binary caches - Nix and Spack are two good examples. That only works reliably because the builds are deterministic enough; the package managers know everything that is relevant (<code>libc</code>, compilers, native dependencies) so binaries in a shared cache can be relied on and really do function like a cache. For PyPI/pip/wheels that is not the case, and as a result this mixing may work in simple cases and lead to unpredictable problems for more complex builds.</p>"},{"location":"meta-topics/purposes_of_pypi/#history","title":"History","text":"<p>Wheels are a relatively recent addition to PyPI - the first release of the <code>wheel</code> package happened in 2012, PEP 427 \u2013 The Wheel Binary Package Format 1.0 was accepted in 2012, and it took a couple of years before it became the norm to upload wheels for Windows, macOS and Linux for every release. </p> <p>Before wheels arrived on the scene, the <code>setuptools</code>-specific Egg format (<code>.egg</code> files) was regularly used to provide binaries. <code>easy_install</code> plus eggs gave a similar, if less polished, install experience to <code>pip</code> plus wheels.</p> <p>Even before eggs and wheels, it was possible to upload binaries to PyPI. For example, NumPy uploaded <code>.exe</code> installers for Windows (created with NSIS) for years, to help users avoid having to build from source3. To use those installers, they had to be manually downloaded and run. These kinds of installers were not common however, they only made sense for packages that were difficult to build from source.</p>"},{"location":"meta-topics/purposes_of_pypi/#relevant-resources","title":"Relevant resources","text":"<ul> <li>Twitter thread (2021 - Steve Dower, Juan Luis Cano Rodr\u00edguez, Ralf Gommers)   about pros/cons and importance of uploading sdist's to PyPI.</li> </ul>"},{"location":"meta-topics/purposes_of_pypi/#potential-solutions-or-mitigations","title":"Potential solutions or mitigations","text":"<ul> <li>Update package installers to not install from sdist by default if a wheel   cannot be found (see pip#9140).</li> <li>Update PyPI so the three purposes are better separated. E.g., allow upload of   sdist's for archival and \"source code to distributors flow\" without making   them available for direct installation.</li> </ul> <ol> <li> <p>There are other installers besides <code>pip</code>, such as pypa/installer.Usage of alternative installers isn't widespread yet.\u00a0\u21a9</p> </li> <li> <p>Note that each minor version of CPython and PyPy has to be treated separately (unless one is using the stable ABI), so typically a package will have 3 or 4 wheels for different minor versions of CPython with the same OS, CPU and libc flavors.\u00a0\u21a9</p> </li> <li> <p>The <code>.exe</code> and <code>.whl</code> files and their upload dates for the NumPy 1.6.0 release illustrate how long <code>.exe</code> files remained in use, and when wheels were added (retroactively in that case).\u00a0\u21a9</p> </li> </ol>"},{"location":"meta-topics/pypi_social_model/","title":"PyPI's author-led social model and its limitations","text":"<p>PyPI has an \"author-led social model\", meaning that individual package authors (or groups of authors) control if and when packages get published on PyPI and what they contain. PyPI itself has maintainers, but their purview is the functioning of the PyPI service/infrastructure - dealing with file size limits and issues around names of packages on PyPI (see PEP 541 - Package Index Name Retention) is the very limited extent to which they get involved in what happens for any particular package name on PyPI.</p> <p>An author-led model is common for language-specific package repositories - npm (JavaScript), crates.io (Rust), CRAN (R), RubyGems (Ruby), and CPAN(Perl) and work roughly the same way1.</p> <p>This contrasts with system package managers, which typically have a more centralized social model - they typically have a set of policies to specify that packaging gets done a certain way, and mechanisms and tools for a central team to enforce those policies.</p>"},{"location":"meta-topics/pypi_social_model/#current-state","title":"Current state","text":"<p>There are pros and cons to an author-led social model. Pros include:</p> <ul> <li>Package authors have few constraints, and can release their package on PyPI   at the time and with the content that they alone determine.</li> <li>Because authors are in control, the latest version of a package is (almost)   always available on PyPI. Typically well before it makes its way into a   system package manager2.</li> <li>Users get a new release very quickly - this helps package development, which   benefits from fast feedback cycles.</li> <li>The package contents can be changed in whatever way the authors desire. For   distributions there are sometimes issues with packagers patching a package in   a way that the original authors disagree with.</li> </ul> <p>Those benefits are compelling, and most language specific repositories work this way. So what are the cons?</p> <p>First, there is an important difference between source releases and distributing binaries here (also see The multiple purposes of PyPI). For source releases, it seems clear that authors should be in full control - it's their source code after all. The vast majority of system package managers don't deal with distributing source code at all. The cons of an author-led model are all related to binaries:</p> <ul> <li> <p>A key issue is that coordination across packages is extremely difficult,   but necessary. For distributing a working set of binaries that depend on each   other, there are myriad coordination points:</p> <ul> <li>around ABI management and a common toolchain (see   Depending on packages for which an ABI matters),</li> <li>about building native dependencies   once instead of having every consumer of that dependency rebuild and   vendor it,</li> <li>about upgrades and rolling out support for new platforms, Python   versions, or interpreters like PyPy or Pyston,</li> <li>about runtimes that should be unique in an environment (e.g., see the   content about OpenMP).</li> </ul> </li> <li> <p>The ability to do system integration and integration testing is very   limited. With PyPI, there is a limited amount of integration testing that   package authors do in an ad-hoc fashion (e.g., downstream package authors may   test pre-releases). For everything else, the user is the integrator.</p> </li> <li>The requirement to avoid external dependencies through vendoring or static   linking of dependencies in wheels is directly caused by the author-led social   model. This is a significant problem, as discussed in detail in content on   native dependencies.</li> </ul> <p>During the introduction of support for binaries on PyPI in the form of wheels, this social model seems to have only been used implicitly - it was more or less a given (wheels replaced eggs, which already had similar characteristics). The key issue of vendoring wasn't touched upon in PEP 427 \u2013 The Wheel Binary Package Format 1.0, and only appears in PEP 513 \u2013 A Platform Tag for Portable Linux Built Distributions where it gets a significant amount of consideration:</p> <p>Bundled Wheels on Linux (PEP 513)</p> <p>While we acknowledge many approaches for dealing with third-party library dependencies within <code>manylinux1</code> wheels, we recognize that the <code>manylinux1</code> policy encourages bundling external dependencies, a practice which runs counter to the package management policies of many linux distributions' system package managers. The primary purpose of this is cross-distro compatibility. Furthermore, <code>manylinux1</code> wheels on PyPI occupy a different niche than the Python packages available through the system package manager.</p> <p>...</p> <p>The model described in this PEP is most ideally suited for cross-platform Python packages, because it means they can reuse much of the work that they\u2019re already doing to make static Windows and OS X wheels. We recognize that it is less optimal for Linux-specific packages that might prefer to interact more closely with Linux\u2019s unique package management functionality and only care about targeting a small set of particular distos.</p> <p>In hindsight3, the viewpoint in the quote above was problematic. Linux is not special here, aside from there being so many distros. All the major issues around coordination, system integration and avoiding external dependencies apply equally on Windows, macOS and Linux. And in practice, complex projects with native code have similar issues on all platforms.</p> Who should be hitting the bugs in a new release? <p>This is a bit of a philosophical question, and only partially related to the author-led vs. centralized social model. However, it is also an important question. Packages with native code tend to have an above-average amount of unexpected issues for any given new version, and those issues take longer to fix. Package authors benefit from fast, high-quality bug reports for those issues. The average end user benefits from stability, and is often not able to generate the desired high-quality bug reports.</p> <p>So to answer the question: ideally, distro packagers, downstream package authors, and early adopters (power users who understand and can deal with the occasional hiccup) should be hitting the bugs in new releases. End users, who may not even realize that they're living on the edge, should not. A problem with PyPI/pip/wheels is that the average Python user is indeed living on the edge, and doesn't know it.</p> <p>Python usage in 2020 and 2021</p> <p>From the Python Developers Survey 2021 results:</p> <p>There are no great changes in the distribution of Python use cases over the years. Data analysis (51-54%), machine learning (36-38%), web development (45-48%), and DevOps (36-38%) are still the most popular fields for Python usage.</p> <p>About half of all Python users are scientific, engineering, and data science users now. These users are not \"developers\" - they are scientists and engineers first, and programming is a tool to do their actual job. They shouldn't be the ones consuming <code>.0</code> releases the day they're available. See, e.g., also this \"using software\" vs. \"developing software\" post.</p>"},{"location":"meta-topics/pypi_social_model/#problems","title":"Problems","text":"<ul> <li>It's difficult to do anything that requires coordination across projects. For   example, rebuilding all projects for a new Python interpreter, toolchain   change, or common library or protocol like Protobuf or DLPack (upgrading in   sync after a possible breaking change is easier than staggered upgrades).</li> <li>The limitations of PyPI force themselves on Python projects as limitations on   the project as a whole4. Because there's a lot of user demand for PyPI and   because package authors are responsible for building wheels themselves, they   tend to not do anything that doesn't work well on PyPI. Even though the   opportunity cost is large. They are not making such trade-offs for other   package repositories - they tend to consider that the downstream packagers'   problem.</li> <li>The large amount of extra effort for package authors when dealing with native   dependencies. For any other packaging system, that cost gets shared across   all users of the native dependency. For PyPI, there's a significant extra   cost per project of rebuilding, vendoring, etc.</li> <li>Lack of understanding by the Python packaging community about the different   types of Python users. In particular, what is often forgotten is the   distinction between users who are developers (which includes ~100% of   participants in Python packaging design discussions) and users who write   Python to get their job done but are not developers (at least, they are not   thinking about themselves as developers - Python is simply one tool in their toolbox).   Most decisions around Python packaging only consider the developer role.</li> </ul>"},{"location":"meta-topics/pypi_social_model/#history","title":"History","text":"<p>Some history on introduction of wheels captured above. More history is TODO.</p>"},{"location":"meta-topics/pypi_social_model/#relevant-resources","title":"Relevant resources","text":"<p>Some threads on language-specific vs. system package managers:</p> <ul> <li>Usage of language-specific package managers Debian mailing list thread (2013),</li> <li>Language Specific Package Managers blog post by Kevin Cox (2013),</li> <li>Maintaining language-specific module package stacks Ubuntu Discourse thread (2019),</li> <li>Nix vs Language Package manager Nix Discourse thread (2020),</li> </ul>"},{"location":"meta-topics/pypi_social_model/#potential-solutions-or-mitigations","title":"Potential solutions or mitigations","text":"<ul> <li>Improve interoperability with system package managers, so that the strengths   and weaknesses of language and system package managers can be combined by   users.</li> <li>Separating source and binary distribution on PyPI better (as discussed   here) and/or building a build farm (as discussed   here) may mitigate some of the issues.</li> <li>Develop an explicit shared understanding within the Python packaging   community of where the author-led social model really breaks down and the   effort of distributing wheels is prohibitive (e.g.,   the geospatial stack).</li> </ul> <ol> <li> <p>PyPI has perhaps the least amount of rules and uniformity of all of the mentioned language-specific repositories, however the big picture is the same for all of them.\u00a0\u21a9</p> </li> <li> <p>For Conda, Spack, or Homebrew, the delay of a package updating may be days to weeks. For a Linux distros like Debian it could be weeks (unstable) to years (stable).\u00a0\u21a9</p> </li> <li> <p>Hindsight is 20/20. PEP 513 and the introduction of <code>manylinux</code> was still an impressive feat; some challenging technical problems around dealing with ABI compatibility across a large collection of Linux distros were solved in that process.\u00a0\u21a9</p> </li> <li> <p>\"We can't use X because on PyPI we cannot guarantee property Y for X\". Example: SciPy forbids using OpenMP, because on PyPI there is no way to ensure that only a single OpenMP runtime (and not <code>libgomp</code>) is used (see here). Similar for C++17 usage (blocked by <code>manylinux</code> for a long time), MPI (shared runtime), etc.\u00a0\u21a9</p> </li> </ol>"},{"location":"meta-topics/user_expectations_wheels/","title":"Expectations that projects provide ever more wheels","text":"<p>Most users expect <code>pip install project-name</code> to work on all platforms. When building from source is difficult, that expectation translates into requests to projects to provide more wheels. Building many wheels can result in a lot of maintenance work and load on CI systems.</p>"},{"location":"meta-topics/user_expectations_wheels/#current-state","title":"Current state","text":"<p>See this summary for the combination of operating systems, Python interpreters, CPU architectures and <code>libc</code> flavors which are supported by wheel specs/tags. The <code>cibuildwheel</code> matrix adds up to 70 combinations - and that doesn't include multiple <code>manylinux</code> versions, <code>universal2</code> for macOS, i686 (32-bit) Linux, or some architectures that were added in PEP 599 (<code>armv7l</code>, <code>ppc64</code>). Nor does it include tags that are likely to be added (WASM), or for which tags exist but aren't supported by PyPI (Pyston, AIX).</p> <p>In practice, the less popular platforms are not supported by most projects and the number of wheels they upload to PyPI is in the 20-40 range. Examples:</p> <ul> <li>Kivy 2.1.0 (20 wheels),</li> <li>NumPy 1.23.5 (27 wheels),</li> <li>Numba 0.56.4 (27 wheels),</li> <li>Mypy 0.991 (29 wheels),</li> <li>asyncpg 0.27.0 (35 wheels),</li> <li>Pydantic 1.10.2 (35 wheels),</li> <li>PyGame 2.1.2 (57 wheels).</li> </ul> <p>That is still a large amount of wheels, and maintaining support for them is often problematic.</p> <p>A key ingredient for building wheels is availability of CI systems which support the target platforms. Most projects use 3-4 different CI systems, and/or make use of cross-compilation when a target platform isn't natively supported (e.g., macOS arm64 CI runners were unavailable for 2 years, and are still only available on Cirrus CI as of Dec 2022, and PowerPC (<code>ppc64le</code>) and IBM Z (<code>s390x</code>) are only available on Travis CI). <code>cibuildwheel</code> has lowered the effort to build wheels compared to <code>multibuild</code>, however the CI system requirements haven't changed. Each CI system requires maintenance - and self-hosted CI runners are even worse in this respect. That maintenance cost can be shared much more easily for packaging systems with centralized builds; for building wheels they have to be paid by every project (see Lack of a build farm for PyPI for more details).</p>"},{"location":"meta-topics/user_expectations_wheels/#problems","title":"Problems","text":"<p>The primary problem is the large amount of maintenance effort on CI systems for wheel building. This is particularly painful because:</p> <ul> <li>there are usually one a couple of maintainers (perhaps even a single   person) who are responsible for or have expertise in wheel building,</li> <li>issues that show up are often specific to the platform and hence   cannot be debugged locally on the maintainer's development machine,</li> <li>there are a lot of \"layers\" to wade through: CI system, cibuildwheel,   pip, build backend, backend, build system.</li> </ul> <p>Another issue is that a lot of discussion needed each time there is a request to any project to support a new platform.</p>"},{"location":"meta-topics/user_expectations_wheels/#history","title":"History","text":"<p>TODO</p>"},{"location":"meta-topics/user_expectations_wheels/#relevant-resources","title":"Relevant resources","text":"<p>Links to key issues, forum discussions, PEPs, blog posts, etc.</p> <ul> <li>Supporting WASM wheels on PyPI thread on Discourse (2022)</li> <li>Reducing effort spent on wheels? thread on the NumPy mailing list (2021)</li> </ul> <p>Related to platform support:</p> <ul> <li>PEP 11 - CPython platform support,</li> <li>NEP 29 - Recommend Python and NumPy version support as a community policy standard,</li> <li>SciPy Toolchain Roadmap &amp; Official Builds.</li> </ul>"},{"location":"meta-topics/user_expectations_wheels/#potential-solutions-or-mitigations","title":"Potential solutions or mitigations","text":"<ul> <li>Reducing the number of wheels needed. HPy is   probably the most promising way of achieving this.</li> <li>Defining a \"supported platforms\" policy that can be used across projects to   make and document decisions around this topic.</li> <li>A build farm for PyPI (see this meta topic).</li> <li>Having PyPI integrate better with other packaging systems, so users can   obtain pure Python packages from PyPI in combination with hard-to-build   packages from a package manager with support for the platform of interest.</li> <li>Manage user expectations better, and   be honest about limitations of PyPI/wheels.   Users are often better served by a distribution that is built and tested in a   consistent fashion than by downloading a standalone interpreter and then   installing packages from PyPI. This is often not even presented on install   pages as an option, let alone recommended.</li> </ul>"}]}